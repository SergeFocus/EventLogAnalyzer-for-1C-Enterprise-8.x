{3,
{46,0,1,50,13,1,0,0,00000000-0000-0000-0000-000000000000,1,
{1,0},0,0,1,1,1,0,3,0,
{2,3ccc650e-f631-4cae-8e33-3eaac610b5f9,"ПриОткрытии",9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,"ПриСозданииНаСервере",1,0,3ccc650e-f631-4cae-8e33-3eaac610b5f9,0,1,9f2e5ddb-3492-4f5d-8f0d-416b8d1d5c5b,0,1},
{0},1,
{21,
{-1,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ФормаКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,2,0},3,a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{13,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"Выбрать",
{1,0},1,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,1,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{16,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ВыбратьExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{14,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"Закрыть",
{1,0},1,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{17,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ЗакрытьExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},a9f3b1ac-f51b-431e-b102-55a69acdecad,
{28,
{15,02023637-7868-4a5f-8576-835a76e0c9ba},0,1,
{0,
{0,
{"B",1},0}
},0,"Справка",
{1,0},1,
{0,39bb0fe9-771d-4dd5-8a6e-2d16984523af},
{0},3,0,0,0,2,2,0,0,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,
{4,0,
{0},"",-1,-1,1,0,""},1,
{"Pattern"},"",0,0,1,
{10,
{18,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"СправкаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},
{"U"},1,0,0,1,0,0,0,3,3,3,0,0,0,0},1,0,0,0,3,3},1,143c00f7-a42d-4cd7-9189-88e4467dc768,
{51,
{1,02023637-7868-4a5f-8576-835a76e0c9ba},0,2,1,
{0,
{0,
{"B",1},0}
},"ДеревоОбъектовМетаданных",0,0,0,
{1,0},
{1,0},
{1,
{1}
},0,1,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,1,2,2,1,1,0,0,0,1,2,1,0,1,1,
{0},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,0,
{1,1282f000-23b6-4887-87f4-9e8e79db3d32,"ДеревоОбъектовМетаданныхВыбор",1,0,1282f000-23b6-4887-87f4-9e8e79db3d32,0,1},
{13,01833a5a-6553-4c49-b445-095018107bb5,05468165-f954-45a5-84f2-6641c51f9f23,0ae4bea5-23be-42a7-b69e-97b11b29c453,0d0249a4-2b2f-4fc0-a66f-b36f9494b3cc,2bbe4e12-06d2-409b-a972-eea585125d83,37740564-9e86-44a0-bea9-3f485a5a3f91,51c99108-107c-43e1-8918-e48835bf2495,58b2a785-23f6-4b0e-a324-9a1323285595,8d772f97-c0ef-47c0-9cb0-efea28c61341,9ef79140-3de6-436a-8dda-610bb963f5db,b0016a68-ec64-4e6d-b905-c71fd62efc4c,b41f5bbc-ba5d-4888-8cd1-db246a371418,fa51b106-eae6-44c7-8054-76cbb3100603},1,
{21,
{2,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ДеревоОбъектовМетаданныхКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{21,
{3,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},9,"ДеревоОбъектовМетаданныхКоманднаяПанель",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{0,0,1},0,1,0,0,0,3,3},1,cd5394d0-7dda-4b56-8927-93ccbe967a01,
{21,
{12,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},2,"Группа",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{2,2,1,0,3,
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{0},
{"Pattern"},"",
{1,0},0},3,77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{8,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},3,"Пометка",0,0,
{1,1,
{"ru","Пометка"}
},
{1,0},
{2,
{1},
{3}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{10,1,
{3,4,
{0}
},
{3,4,
{0}
},0,
{1,0},
{3,4,
{0}
},
{7,3,0,1,100},0,0,0,2},
{1,fe115cc8-9e33-4684-a166-bd5136fe7a9f,"ПометкаПриИзменении",1,0,fe115cc8-9e33-4684-a166-bd5136fe7a9f,0,1},1,
{21,
{9,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ПометкаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{21,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПометкаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{10,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},4,"Картинка",0,0,
{1,0},
{1,0},
{2,
{1},
{4}
},
{0},1,0,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{8,2,1,0,0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,0,
{1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},0,0,
{0,1,0},1,0,0,1,0},
{0,1,0},1,
{21,
{11,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"КартинкаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{22,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"КартинкаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},77ffcc29-7f2d-4223-b22f-19666e7250ba,
{33,
{6,02023637-7868-4a5f-8576-835a76e0c9ba},1,0,1,
{0,
{0,
{"B",1},0}
},2,"Представление",1,0,
{1,1,
{"ru","Объект метаданных"}
},
{1,0},
{2,
{1},
{2}
},
{0},1,1,2,0,2,
{1,0},
{1,0},1,1,0,3,0,3,1,3,0,
{4,0,
{0},"",-1,-1,1,0,""},
{4,0,
{0},"",-1,-1,1,0,""},
{3,4,
{0}
},
{7,3,0,1,100},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{32,
{3,0},0,0,2,2,0,2,2,2,2,2,2,2,2,2,
{"U"},
{"U"},"",0,
{4,0,
{0},"",-1,-1,1,0,""},0,0,2,3,00000000-0000-0000-0000-000000000000,
{5004,0},
{0,0},2,
{1,0},
{1,0},2,1,0,
{"Pattern"},1,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},1,
{3,0,0},0,
{1,0},2,0,2,0,1,0,0,1,0,0,0,0,0,0,0,0,0},
{0,1,0},1,
{21,
{7,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,1,
{0,
{0,
{"B",1},0}
},8,"ПредставлениеКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{"Pattern"},
{"Pattern"},"","",
{0},0,0,1,
{10,
{23,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ПредставлениеExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},3,3},1,0,1,
{10,
{20,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ГруппаExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},2,2,1,0,
{"Pattern"},"","",0,2,0,1,
{10,
{19,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоОбъектовМетаданныхExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},1,1,1,1,
{4,
{24,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоОбъектовМетаданныхСтрокаПоиска",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0},1,
{21,
{25,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоОбъектовМетаданныхСтрокаПоискаКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{26,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоОбъектовМетаданныхСтрокаПоискаРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{1,0},0,3,3},1,
{4,
{27,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,1,"ДеревоОбъектовМетаданныхСостояниеПросмотра",
{1,0},
{1,0},1,1,0,1,
{1,0,2,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{7,3,0,1,100},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e},3,
{0,1,0},1,0,0},1,
{21,
{28,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоОбъектовМетаданныхСостояниеПросмотраКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{29,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоОбъектовМетаданныхСостояниеПросмотраРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{1,1},0,3,3},1,
{4,
{30,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,2,"ДеревоОбъектовМетаданныхУправлениеПоиском",
{1,0},
{1,0},1,1,0,1,
{1,0,
{3,4,
{0}
},
{3,4,
{0}
},
{3,4,
{0}
},
{7,3,0,1,100},
{0,1,0},1,0,0,2},1,
{21,
{31,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,8,"ДеревоОбъектовМетаданныхУправлениеПоискомКонтекстноеМеню",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{1,1},0,1,0,0,0,3,3},1,
{10,
{32,02023637-7868-4a5f-8576-835a76e0c9ba},0,0,0,0,"ДеревоОбъектовМетаданныхУправлениеПоискомРасширеннаяПодсказка",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},2,
{1,2},0,3,3},0,1,0,0,1,0,3,3,0,1,0},"","",1,
{21,
{0},0,0,0,7,"Navigator",
{1,0},
{1,0},0,1,0,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},0,0,1,0,1,
{10,
{0},0,0,0,0,"NavigatorExtendedTooltip",
{1,0},
{1,0},1,0,0,2,2,
{3,4,
{0}
},
{7,3,0,1,100},
{0,0,0},1,
{5,0,0,3,0,
{0,1,0},
{3,4,
{0}
},
{3,4,
{0}
},
{3,0,
{0},0,1,0,48312c09-257f-4b29-b280-284dd89efc1e}
},0,1,2,
{1,
{1,0},0},0,0,1,0,0,1,0,3,3},0,3,3},1,"",2,0,0,0,0,0,3,3,0,0,2,100,1,1,0},"////////////////////////////////////////////////////////////////////////////////
//                          ИСПОЛЬЗОВАНИЕ ФОРМЫ                               //
//
// Форма предназначена для выбора объектов метаданных конфигурации и передачи
// выбранных их списка в вызывающую среду.
//
// Параметры вызова:
// КоллекцииВыбираемыхОбъектовМетаданных - СписокЗначений - фактически фильтр
//				по типам объектов метаданных, которые могут быть выбраны.
//				Например:
//					ФильтрПоСсылочнымМетаданным = Новый СписокЗначений;
//					ФильтрПоСсылочнымМетаданным.Добавить(""Справочники"");
//					ФильтрПоСсылочнымМетаданным.Добавить(""Документы"");
//				Позволяет выбирать только объекты метаданных справочники и документы.
// ВыбранныеОбъектыМетаданных - СписокЗначений - уже выбранные объекты метаданных.
//				В дереве метаданных такие объекты будут отмечены флажком выбора.
//				Может быть полезным для установки объектов метаданных выбора по умолчанию
//				или переустановки уже установленного списка.
// РодительскиеПодсистемы - СписокЗначений - подсистемы, только подчиненные подсистемы которых
// 				будут отображаться в форме (спец. для помощника внедрения БСП). 
// ТолькоПодсистемыСКИ - булево - признак того, что в списке выбора будут только те подсистемы, 
//				которые включены в командный интерфейс (спец. для помощника внедрения БСП).
// ВыборЕдинственного - булево - признак того, что выбирается единственный объект метаданных.
//              При этом пометка нескольких будет невозможна, кроме того двойной клик по строке
//              с объектом метаданных осуществит выбор.
// НачальноеЗначениеВыбора - Строка - полное имя метаданных, на котором будет спозиционирован
//              список при открытии формы.
//

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	ВыбранныеОбъектыМетаданных.ЗагрузитьЗначения(Параметры.ВыбранныеОбъектыМетаданных.ВыгрузитьЗначения());
		
	Если Параметры.Свойство(""ВыборЕдинственного"", ВыборЕдинственного) И ВыборЕдинственного Тогда
		Элементы.Пометка.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство(""Заголовок"") Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	Параметры.Свойство(""НачальноеЗначениеВыбора"", НачальноеЗначениеВыбора);
	
	ДеревоОбъектовМетаданныхЗаполнить();
	
	Если Параметры.РодительскиеПодсистемы.Количество()> 0 Тогда
		Элементы.ДеревоОбъектовМетаданных.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	КонецЕсли;
	
	НачальнаяПометкаКоллекций(ДеревоОбъектовМетаданных);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Устанавливаем начальное значение выбора.
	Если ИдентификаторТекущейСтрокиПриОткрытии > 0 Тогда
		
		Элементы.ДеревоОбъектовМетаданных.ТекущаяСтрока = ИдентификаторТекущейСтрокиПриОткрытии;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура обработчик события нажатия на поле ""Пометка"" дерева формы.
&НаКлиенте
Процедура ПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	Если ТекущиеДанные.Пометка = 2 Тогда
		ТекущиеДанные.Пометка = 0;
	КонецЕсли;
	ПометитьВложенныеЭлементы(ТекущиеДанные);
	ПометитьЭлементыРодителей(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоОбъектовМетаданных

&НаКлиенте
Процедура ДеревоОбъектовМетаданныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ВыборЕдинственного Тогда
		
		ВыбратьВыполнить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьВыполнить()
	
	Если ВыборЕдинственного Тогда
		
		ТекДанные = Элементы.ДеревоОбъектовМетаданных.ТекущиеДанные;
		Если ТекДанные <> Неопределено
			И ТекДанные.ЭтоОбъектМетаданных Тогда
			
			ВыбранныеОбъектыМетаданных.Очистить();
			ВыбранныеОбъектыМетаданных.Добавить(ТекДанные.ПолноеИмя);
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
	Иначе
		
		ВыбранныеОбъектыМетаданных.Очистить();
		
		ПолучениеДанных();
		
	КонецЕсли;
	
	ОповеститьОВыборе(ВыбранныеОбъектыМетаданных);
	
	//Оповестить(""ВыборОбъектовМетаданных"", ВыбранныеОбъектыМетаданных, Параметры.УникальныйИдентификаторИсточник);
	//
	//Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьВыполнить()
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокПодсистем(СписокПодсистем) 
	Для Каждого Подсистема Из СписокПодсистем Цикл
		Если Подсистема.ВключатьВКомандныйИнтерфейс Тогда
			ЭлементыПодсистемСКоманднымИнтерфейсом.Добавить(Подсистема.ПолноеИмя());
		КонецЕсли;	
		
		Если Подсистема.Подсистемы.Количество() > 0 Тогда
			ЗаполнитьСписокПодсистем(Подсистема.Подсистемы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура заполняет дерево значений объектов конфигурации.
// Если список значений ""Параметры.КоллекцииВыбираемыхОбъектовМетаданных"" не пуст, тогда
// дерево будет ограничено переданным списком коллекций объектов метаданных.
//  Если объекты метаданных в сформированном дереве будут найдены в списке значений
// ""Параметры.ВыбранныеОбъектыМетаданных"", тогда они будут помечены, как выбранные.
//
&НаСервере
Процедура ДеревоОбъектовМетаданныхЗаполнить()
	
	КоллекцииОбъектовМетаданных = Новый ТаблицаЗначений;
	КоллекцииОбъектовМетаданных.Колонки.Добавить(""Имя"");
	КоллекцииОбъектовМетаданных.Колонки.Добавить(""Синоним"");
	КоллекцииОбъектовМетаданных.Колонки.Добавить(""Картинка"");
	КоллекцииОбъектовМетаданных.Колонки.Добавить(""КартинкаОбъекта"");
	КоллекцииОбъектовМетаданных.Колонки.Добавить(""ЭтоКоллекцияОбщие"");
	КоллекцииОбъектовМетаданных.Колонки.Добавить(""ПолноеИмя"");
	КоллекцииОбъектовМетаданных.Колонки.Добавить(""Родитель"");
	
	КоллекцииОбъектовМетаданных_НоваяСтрока(""Подсистемы"",                   НСтр(""ru = 'Подсистемы'""),                     35, 36, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""ОбщиеМодули"",                  НСтр(""ru = 'Общие модули'""),                   37, 38, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""ПараметрыСеанса"",              НСтр(""ru = 'Параметры сеанса'""),               39, 40, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""Роли"",                         НСтр(""ru = 'Роли'""),                           41, 42, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""ПланыОбмена"",                  НСтр(""ru = 'Планы обмена'""),                   43, 44, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""КритерииОтбора"",               НСтр(""ru = 'Критерии отбора'""),                45, 46, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""ПодпискиНаСобытия"",            НСтр(""ru = 'Подписки на события'""),            47, 48, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""РегламентныеЗадания"",          НСтр(""ru = 'Регламентные задания'""),           49, 50, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""ФункциональныеОпции"",          НСтр(""ru = 'Функциональные опции'""),           51, 52, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""ПараметрыФункциональныхОпций"", НСтр(""ru = 'Параметры функциональных опций'""), 53, 54, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""ХранилищаНастроек"",            НСтр(""ru = 'Хранилища настроек'""),             55, 56, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""ОбщиеФормы"",                   НСтр(""ru = 'Общие формы'""),                    57, 58, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""ОбщиеКоманды"",                 НСтр(""ru = 'Общие команды'""),                  59, 60, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""ГруппыКоманд"",                 НСтр(""ru = 'Группы команд'""),                  61, 62, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""Интерфейсы"",                   НСтр(""ru = 'Интерфейсы'""),                     63, 64, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""ОбщиеМакеты"",                  НСтр(""ru = 'Общие макеты'""),                   65, 66, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""ОбщиеКартинки"",                НСтр(""ru = 'Общие картинки'""),                 67, 68, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""ПакетыXDTO"",                   НСтр(""ru = 'XDTO-пакеты'""),                    69, 70, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""WebСервисы"",                   НСтр(""ru = 'Web-сервисы'""),                    71, 72, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""WSСсылки"",                     НСтр(""ru = 'WS-ссылки'""),                      73, 74, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""Стили"",                        НСтр(""ru = 'Стили'""),                          75, 76, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""Языки"",                        НСтр(""ru = 'Языки'""),                          77, 78, Истина, КоллекцииОбъектовМетаданных);
	
	КоллекцииОбъектовМетаданных_НоваяСтрока(""Константы"",                    НСтр(""ru = 'Константы'""),                      БиблиотекаКартинок.Константа,              БиблиотекаКартинок.Константа,                    Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""Справочники"",                  НСтр(""ru = 'Справочники'""),                    БиблиотекаКартинок.Справочник,             БиблиотекаКартинок.Справочник,                   Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""Документы"",                    НСтр(""ru = 'Документы'""),                      БиблиотекаКартинок.Документ,               БиблиотекаКартинок.ДокументОбъект,               Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""ЖурналыДокументов"",            НСтр(""ru = 'Журналы документов'""),             БиблиотекаКартинок.ЖурналДокументов,       БиблиотекаКартинок.ЖурналДокументов,             Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""Перечисления"",                 НСтр(""ru = 'Перечисления'""),                   БиблиотекаКартинок.Перечисление,           БиблиотекаКартинок.Перечисление,                 Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""Отчеты"",                       НСтр(""ru = 'Отчеты'""),                         БиблиотекаКартинок.Отчет,                  БиблиотекаКартинок.Отчет,                        Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""Обработки"",                    НСтр(""ru = 'Обработки'""),                      БиблиотекаКартинок.Обработка,              БиблиотекаКартинок.Обработка,                    Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""ПланыВидовХарактеристик"",      НСтр(""ru = 'Планы видов характеристик'""),      БиблиотекаКартинок.ПланВидовХарактеристик, БиблиотекаКартинок.ПланВидовХарактеристикОбъект, Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""ПланыСчетов"",                  НСтр(""ru = 'Планы счетов'""),                   БиблиотекаКартинок.ПланСчетов,             БиблиотекаКартинок.ПланСчетовОбъект,             Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""ПланыВидовРасчета"",            НСтр(""ru = 'Планы видов характеристик'""),      БиблиотекаКартинок.ПланВидовХарактеристик, БиблиотекаКартинок.ПланВидовХарактеристикОбъект, Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""РегистрыСведений"",             НСтр(""ru = 'Регистры сведений'""),              БиблиотекаКартинок.РегистрСведений,        БиблиотекаКартинок.РегистрСведений,              Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""РегистрыНакопления"",           НСтр(""ru = 'Регистры накопления'""),            БиблиотекаКартинок.РегистрНакопления,      БиблиотекаКартинок.РегистрНакопления,            Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""РегистрыБухгалтерии"",          НСтр(""ru = 'Регистры бухгалтерии'""),           БиблиотекаКартинок.РегистрБухгалтерии,     БиблиотекаКартинок.РегистрБухгалтерии,           Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""РегистрыРасчета"",              НСтр(""ru = 'Регистры расчета'""),               БиблиотекаКартинок.РегистрРасчета,         БиблиотекаКартинок.РегистрРасчета,               Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""БизнесПроцессы"",               НСтр(""ru = 'Бизнес-процессы'""),                БиблиотекаКартинок.БизнесПроцесс,          БиблиотекаКартинок.БизнесПроцессОбъект,          Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока(""Задачи"",                       НСтр(""ru = 'Задачи'""),                         БиблиотекаКартинок.Задача,                 БиблиотекаКартинок.ЗадачаОбъект,                 Ложь, КоллекцииОбъектовМетаданных);
	
	// Создание предопределенных элементов.
	ПараметрыЭлемента = ПараметрыЭлементаДереваОбъектовМетаданных();
	ПараметрыЭлемента.Имя = Метаданные.Имя;
	ПараметрыЭлемента.Синоним = Метаданные.Синоним;
	ПараметрыЭлемента.Картинка = 79;
	ПараметрыЭлемента.Родитель = ДеревоОбъектовМетаданных;
	ЭлементКонфигурация = НоваяСтрокаДерева(ПараметрыЭлемента);
	
	ПараметрыЭлемента = ПараметрыЭлементаДереваОбъектовМетаданных();
	ПараметрыЭлемента.Имя = ""Общие"";
	ПараметрыЭлемента.Синоним = ""Общие"";
	ПараметрыЭлемента.Картинка = 0;
	ПараметрыЭлемента.Родитель = ЭлементКонфигурация;
	ЭлементОбщие = НоваяСтрокаДерева(ПараметрыЭлемента);
	
	// Заполнение дерева объектов метаданных.
	Для Каждого Строка Из КоллекцииОбъектовМетаданных Цикл
		Если Параметры.КоллекцииВыбираемыхОбъектовМетаданных.Количество() = 0
			Или Параметры.КоллекцииВыбираемыхОбъектовМетаданных.НайтиПоЗначению(Строка.Имя) <> Неопределено Тогда
			Строка.Родитель = ?(Строка.ЭтоКоллекцияОбщие, ЭлементОбщие, ЭлементКонфигурация);
			ДобавитьЭлементДереваОбъектовМетаданных(Строка, ?(Строка.Имя = ""Подсистемы"", Метаданные.Подсистемы, Неопределено));
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОбщие.ПолучитьЭлементы().Количество() = 0 Тогда
		ЭлементКонфигурация.ПолучитьЭлементы().Удалить(ЭлементОбщие);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает новую структуру параметров элемента дерева объектов метаданных.
//
// Возвращаемое значение:
//   Структура с полями:
//     Имя           - Строка - имя родительского элемента.
//     Синоним       - Строка - синоним родительского элемента.
//     Пометка       - Булево - начальная пометка коллекции или объекта метаданных.
//     Картинка      - Число - код картинки родительского элемента.
//     КартинкаОбъекта - Число - код картинки подэлемента.
//     Родитель        - ссылка на элемента дерева значений, который является корнем
//                       для добавляемого элемента.
//
Функция ПараметрыЭлементаДереваОбъектовМетаданных()
	
	Возврат Новый Структура(""Имя,ПолноеИмя,Синоним,Пометка,Картинка,КартинкаОбъекта,Родитель"", """", """", Ложь, 0, 0, Неопределено);
	
КонецФункции

// Добавляет новую строку в дерево значений формы (дерево),
// а также заполняет полный набор строк из метаданных по переданному параметру.
//
// Если параметр Подсистемы заполнен, то вызывается рекурсивно для всех дочерних подсистем.
//
// Параметры:
//   ПараметрыЭлемента - Структура с полями:
//     Имя           - Строка - имя родительского элемента.
//     Синоним       - Строка - синоним родительского элемента.
//     Пометка       - Булево - начальная пометка коллекции или объекта метаданных.
//     Картинка      - Число - код картинки родительского элемента.
//     КартинкаОбъекта - Число - код картинки подэлемента.
//     Родитель        - ссылка на элемента дерева значений, который является корнем
//                       для добавляемого элемента.
//   Подсистемы      - если заполнен, то содержит значение Метаданные.Подсистемы (коллекцию элементов).
//   Проверять       - Булево - признак проверки на принадлежность родительским подсистемам.
// 
// Возвращаемое значение:
// 
//   Строка дерева объектов метаданных.
//
&НаСервере
Функция ДобавитьЭлементДереваОбъектовМетаданных(ПараметрыЭлемента, Подсистемы = Неопределено, Проверять = Истина)
	
	// Проверка на наличие командного интерфейса только в листьях дерева.
	Если Подсистемы <> Неопределено  И Параметры.Свойство(""ТолькоПодсистемыСКИ"") 
		И Не ПустаяСтрока(ПараметрыЭлемента.ПолноеИмя) 
		И ЭлементыПодсистемСКоманднымИнтерфейсом.НайтиПоЗначению(ПараметрыЭлемента.ПолноеИмя) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Подсистемы = Неопределено Тогда
		
		Если Метаданные[ПараметрыЭлемента.Имя].Количество() = 0 Тогда
			
			// Если нет ни одного объекта метаданных из нужной ветки. 
			// Например, нет ни одного регистра бухгалтерии,
			// то корень ""Регистры бухгалтерии"" добавлять не нужно.
			Возврат Неопределено;
			
		КонецЕсли;
		
		НоваяСтрока = НоваяСтрокаДерева(ПараметрыЭлемента, Подсистемы <> Неопределено И Подсистемы <> Метаданные.Подсистемы);
		
		Если Параметры.ТолькоВыбираемыеОбъектыМетаданных = Истина Тогда
			ИмяТипаМетаданных = ИмяТипаМетаданныхПоБазовомуТипу(НоваяСтрока.Имя);
			Для Каждого ЭлементКоллекцииМетаданных Из Параметры.КоллекцииВыбираемыхОбъектовМетаданных Цикл
				
				Если ЗначениеЗаполнено(ИмяТипаМетаданных)
					И Найти(ЭлементКоллекцииМетаданных.Значение, ИмяТипаМетаданных+""."") = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыЭлемента = ПараметрыЭлементаДереваОбъектовМетаданных();
				ПараметрыЭлемента.Имя = СтрЗаменить(ЭлементКоллекцииМетаданных.Значение, ИмяТипаМетаданных+""."", """");
				ПараметрыЭлемента.ПолноеИмя = ЭлементКоллекцииМетаданных.Значение;
				ПараметрыЭлемента.Синоним = ЭлементКоллекцииМетаданных.Значение;
				ПараметрыЭлемента.КартинкаОбъекта = ПараметрыЭлемента.КартинкаОбъекта;
				ПараметрыЭлемента.Родитель = НоваяСтрока;
				НоваяСтрокаДерева(ПараметрыЭлемента, Истина);
				
			КонецЦикла;
		Иначе
			Для Каждого ЭлементКоллекцииМетаданных Из Метаданные[ПараметрыЭлемента.Имя] Цикл
				
				Если Параметры.ФильтрПоОбъектамМетаданных.Количество() > 0
					И Параметры.ФильтрПоОбъектамМетаданных.НайтиПоЗначению(ЭлементКоллекцииМетаданных.ПолноеИмя()) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ПараметрыЭлемента = ПараметрыЭлементаДереваОбъектовМетаданных();
				ПараметрыЭлемента.Имя = ЭлементКоллекцииМетаданных.Имя;
				ПараметрыЭлемента.ПолноеИмя = ЭлементКоллекцииМетаданных.ПолноеИмя();
				ПараметрыЭлемента.Синоним = ЭлементКоллекцииМетаданных.Синоним;
				ПараметрыЭлемента.КартинкаОбъекта = ПараметрыЭлемента.КартинкаОбъекта;
				ПараметрыЭлемента.Родитель = НоваяСтрока;
				НоваяСтрокаДерева(ПараметрыЭлемента, Истина);
			КонецЦикла;
		КонецЕсли;
		
		Возврат НоваяСтрока;
		
	КонецЕсли;
	
	Если Подсистемы.Количество() = 0 И ПараметрыЭлемента.Имя = ""Подсистемы"" Тогда
		// Если нет ни одной подсистемы, то корень ""Подсистемы"" добавлять не нужно.
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяСтрока = НоваяСтрокаДерева(ПараметрыЭлемента, Подсистемы <> Неопределено И Подсистемы <> Метаданные.Подсистемы);
	
	Для Каждого ЭлементКоллекцииМетаданных Из Подсистемы Цикл
		
		Если Не Проверять
			Или Параметры.РодительскиеПодсистемы.Количество() = 0
			Или Параметры.РодительскиеПодсистемы.НайтиПоЗначению(ЭлементКоллекцииМетаданных.Имя) <> Неопределено Тогда
			
			ПараметрыЭлемента = ПараметрыЭлементаДереваОбъектовМетаданных();
			ПараметрыЭлемента.Имя = ЭлементКоллекцииМетаданных.Имя;
			ПараметрыЭлемента.ПолноеИмя = ЭлементКоллекцииМетаданных.ПолноеИмя();
			ПараметрыЭлемента.Синоним = ЭлементКоллекцииМетаданных.Синоним;
			ПараметрыЭлемента.Картинка = ПараметрыЭлемента.Картинка;
			ПараметрыЭлемента.КартинкаОбъекта = ПараметрыЭлемента.КартинкаОбъекта;
			ПараметрыЭлемента.Родитель = НоваяСтрока;
			ДобавитьЭлементДереваОбъектовМетаданных(ПараметрыЭлемента, ЭлементКоллекцииМетаданных.Подсистемы, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Функция НоваяСтрокаДерева(ПараметрыСтроки, ЭтоОбъектМетаданных = Ложь)
	
	Коллекция = ПараметрыСтроки.Родитель.ПолучитьЭлементы();
	НоваяСтрока = Коллекция.Добавить();
	НоваяСтрока.Имя                 = ПараметрыСтроки.Имя;
	НоваяСтрока.Представление       = ?(ЗначениеЗаполнено(ПараметрыСтроки.Синоним), ПараметрыСтроки.Синоним, ПараметрыСтроки.Имя);
	НоваяСтрока.Пометка             = ?(Параметры.ВыбранныеОбъектыМетаданных.НайтиПоЗначению(ПараметрыСтроки.ПолноеИмя) = Неопределено, 0, 1);
	НоваяСтрока.Картинка            = ПараметрыСтроки.Картинка;
	НоваяСтрока.ПолноеИмя           = ПараметрыСтроки.ПолноеИмя;
	НоваяСтрока.ЭтоОбъектМетаданных = ЭтоОбъектМетаданных;
	
	Если НоваяСтрока.ЭтоОбъектМетаданных 
		И НоваяСтрока.ПолноеИмя = НачальноеЗначениеВыбора Тогда
		ИдентификаторТекущейСтрокиПриОткрытии = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Добавляет новую строку в таблицу значений видов объектов метаданных
// конфигурации.
//
// Параметры:
// Имя           - имя объекта метаданных или вида объекта метаданных.
// Синоним       - синоним объекта метаданных.
// Картинка      - картинка поставленная в соответствие объекту метаданных
//                 или виду объекта метаданных.
// ЭтоКоллекцияОбщие - признак того, что текущий элемент содержит подэлементы.
//
&НаСервере
Процедура КоллекцииОбъектовМетаданных_НоваяСтрока(Имя, Синоним, Картинка, КартинкаОбъекта, ЭтоКоллекцияОбщие, Таб)
	
	НоваяСтрока = Таб.Добавить();
	НоваяСтрока.Имя               = Имя;
	НоваяСтрока.Синоним           = Синоним;
	НоваяСтрока.Картинка          = Картинка;
	НоваяСтрока.КартинкаОбъекта   = КартинкаОбъекта;
	НоваяСтрока.ЭтоКоллекцияОбщие = ЭтоКоллекцияОбщие;
	
КонецПроцедуры

// Процедура рекурсивно устанавливает/снимает пометку для родителей передаваемого элемента.
//
// Параметры:
// Элемент      - ДанныеФормыКоллекцияЭлементовДерева 
//
&НаКлиенте
Процедура ПометитьЭлементыРодителей(Элемент)
	
	Родитель = Элемент.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыРодителя = Родитель.ПолучитьЭлементы();
	Если ЭлементыРодителя.Количество() = 0 Тогда
		Родитель.Пометка = 0;
	ИначеЕсли Элемент.Пометка = 2 Тогда
		Родитель.Пометка = 2;
	Иначе
		Родитель.Пометка = ЗначениеПометкиЭлементов(ЭлементыРодителя);
	КонецЕсли;
	
	ПометитьЭлементыРодителей(Родитель);
	
КонецПроцедуры

&НаКлиенте
Функция ЗначениеПометкиЭлементов(ЭлементыРодителя)
	
	ЕстьПомеченные    = Ложь;
	ЕстьНепомеченные = Ложь;
	
	Для каждого ЭлементРодителя Из ЭлементыРодителя Цикл
		
		Если ЭлементРодителя.Пометка = 2 ИЛИ (ЕстьПомеченные И ЕстьНепомеченные) Тогда
			ЕстьПомеченные    = Истина;
			ЕстьНепомеченные = Истина;
			Прервать;
		ИначеЕсли ЭлементРодителя.ЭтоОбъектМетаданных Тогда
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Пометка;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка;
		Иначе
			ВложенныеЭлементы = ЭлементРодителя.ПолучитьЭлементы();
			Если ВложенныеЭлементы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеПометкиВложенныхЭлементов = ЗначениеПометкиЭлементов(ВложенныеЭлементы);
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Пометка ИЛИ    ЗначениеПометкиВложенныхЭлементов;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка ИЛИ НЕ ЗначениеПометкиВложенныхЭлементов;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьПомеченные Тогда
		Возврат 2;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПометитьЭлементыРодителейНаСервере(Элемент)
	
	Родитель = Элемент.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыРодителя = Родитель.ПолучитьЭлементы();
	Если ЭлементыРодителя.Количество() = 0 Тогда
		Родитель.Пометка = 0;
	ИначеЕсли Элемент.Пометка = 2 Тогда
		Родитель.Пометка = 2;
	Иначе
		Родитель.Пометка = ЗначениеПометкиЭлементовНаСервере(ЭлементыРодителя);
	КонецЕсли;
	
	ПометитьЭлементыРодителейНаСервере(Родитель);
	
КонецПроцедуры

&НаСервере
Функция ЗначениеПометкиЭлементовНаСервере(ЭлементыРодителя)
	
	ЕстьПомеченные    = Ложь;
	ЕстьНепомеченные = Ложь;
	
	Для каждого ЭлементРодителя Из ЭлементыРодителя Цикл
		
		Если ЭлементРодителя.Пометка = 2 ИЛИ (ЕстьПомеченные И ЕстьНепомеченные) Тогда
			ЕстьПомеченные    = Истина;
			ЕстьНепомеченные = Истина;
			Прервать;
		ИначеЕсли ЭлементРодителя.ЭтоОбъектМетаданных Тогда
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Пометка;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка;
		Иначе
			ВложенныеЭлементы = ЭлементРодителя.ПолучитьЭлементы();
			Если ВложенныеЭлементы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеПометкиВложенныхЭлементов = ЗначениеПометкиЭлементовНаСервере(ВложенныеЭлементы);
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Пометка ИЛИ    ЗначениеПометкиВложенныхЭлементов;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка ИЛИ НЕ ЗначениеПометкиВложенныхЭлементов;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(ЕстьПомеченные И ЕстьНепомеченные, 2, ?(ЕстьПомеченные, 1, 0));
	
КонецФункции

// Процедура НачальнаяПометкаКоллекций устанавливает пометку для коллекций
// объектов метаданных, которые не имеют объектов метаданных (истина) и 
// которые имеют объекты метаданных с заданной пометкой.
//
// Параметры:
// Элемент      - ДанныеФормыКоллекцияЭлементовДерева 
//
Процедура НачальнаяПометкаКоллекций(Родитель)
	
	ВложенныеЭлементы = Родитель.ПолучитьЭлементы();
	
	Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
		Если ВложенныйЭлемент.Пометка Тогда
			ПометитьЭлементыРодителейНаСервере(ВложенныйЭлемент);
		КонецЕсли;
		НачальнаяПометкаКоллекций(ВложенныйЭлемент);
	КонецЦикла;
	
КонецПроцедуры

// Процедура рекурсивно устанавливает/снимает пометку для вложенных элементов начиная
// с передаваемого элемента.
//
// Параметры:
// Элемент      - ДанныеФормыКоллекцияЭлементовДерева 
//
&НаКлиенте
Процедура ПометитьВложенныеЭлементы(Элемент)
	
	ВложенныеЭлементы = Элемент.ПолучитьЭлементы();
	
	Если ВложенныеЭлементы.Количество() = 0 Тогда
		Если Не Элемент.ЭтоОбъектМетаданных Тогда
			Элемент.Пометка = 0;
		КонецЕсли;
	Иначе
		Для Каждого ВложенныйЭлемент Из ВложенныеЭлементы Цикл
			ВложенныйЭлемент.Пометка = Элемент.Пометка;
			ПометитьВложенныеЭлементы(ВложенныйЭлемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура для заполнения списка выбранных элементов дерева.
// Рекурсивно просматривает все дерево элементов и в случае, если элемент
// выбран добавляет его ПолноеИмя в список выбранных.
//
// Родитель      - ДанныеФормыЭлементДерева
//
&НаСервере
Процедура ПолучениеДанных(Родитель = Неопределено)
	
	Родитель = ?(Родитель = Неопределено, ДеревоОбъектовМетаданных, Родитель);
	
	КоллекцияЭлементов = Родитель.ПолучитьЭлементы();
	
	Для Каждого Элемент Из КоллекцияЭлементов Цикл
		Если Элемент.Пометка = 1 И Не ПустаяСтрока(Элемент.ПолноеИмя) Тогда
			ВыбранныеОбъектыМетаданных.Добавить(Элемент.ПолноеИмя);
		КонецЕсли;
		ПолучениеДанных(Элемент);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

// Возвращает имя базового типа по переданному значению объекта метаданных.
//
// Параметры:
//  ОбъектМетаданных - объект метаданных, по которому необходимо определить базовый тип.
// 
// Возвращаемое значение:
//  Строка - имя базового типа по переданному значению объекта метаданных.
//
Функция ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) Экспорт
	
	Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаДокументы();
		
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаСправочники();
		
	ИначеЕсли Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПеречисления();
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыСведений();
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыНакопления();
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыБухгалтерии();
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыРасчета();
		
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыОбмена();
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыВидовХарактеристик();
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаБизнесПроцессы();
		
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаЗадачи();
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыСчетов();
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыВидовРасчета();
		
	ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаКонстанты();
		
	ИначеЕсли Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаЖурналыДокументов();
		
	ИначеЕсли Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПоследовательности();
		
	ИначеЕсли Метаданные.РегламентныеЗадания.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегламентныеЗадания();
		
	Иначе
		
		Возврат """";
		
	КонецЕсли;
	
КонецФункции

// Возвращает имя базового типа по переданному значению объекта метаданных.
//
// Параметры:
//  ОбъектМетаданных - объект метаданных, по которому необходимо определить базовый тип.
// 
// Возвращаемое значение:
//  Строка - имя базового типа по переданному значению объекта метаданных.
//
Функция ИмяТипаМетаданныхПоБазовомуТипу(ИмяТипаОбъекта) Экспорт
	
	Если ИмяТипаОбъекта = ИмяТипаДокументы() Тогда
		Возврат ""Документ"";
		
	ИначеЕсли ИмяТипаОбъекта = ИмяТипаСправочники() Тогда
		Возврат ""Справочник"";
		
	ИначеЕсли ИмяТипаОбъекта = ИмяТипаПеречисления() Тогда
		Возврат ""Перечисление"";
		
	ИначеЕсли ИмяТипаОбъекта = ИмяТипаРегистрыСведений() Тогда
		Возврат ""РегистрСведений"";
		
	ИначеЕсли ИмяТипаОбъекта = ИмяТипаРегистрыНакопления() Тогда
		Возврат ""РегистрНакопления"";
		
	ИначеЕсли ИмяТипаОбъекта = ИмяТипаРегистрыБухгалтерии() Тогда
		Возврат ""РегистрБухгалтерии"";
		
	ИначеЕсли ИмяТипаОбъекта = ИмяТипаРегистрыРасчета() Тогда
		Возврат ""РегистрРасчета"";
		
	ИначеЕсли ИмяТипаОбъекта = ИмяТипаПланыОбмена() Тогда
		Возврат ""ПланОбмена"";
		
	ИначеЕсли ИмяТипаОбъекта = ИмяТипаПланыВидовХарактеристик() Тогда
		Возврат ""ПланВидовХарактеристик"";
		
	ИначеЕсли ИмяТипаОбъекта = ИмяТипаБизнесПроцессы() Тогда
		Возврат ""БизнесПроцесс"";
		
	ИначеЕсли ИмяТипаОбъекта = ИмяТипаЗадачи() Тогда
		Возврат ""Задача"";
		
	ИначеЕсли ИмяТипаОбъекта = ИмяТипаПланыСчетов() Тогда
		Возврат ""ПланСчетов"";
		
	ИначеЕсли ИмяТипаОбъекта = ИмяТипаПланыВидовРасчета() Тогда
		Возврат ""ПланВидовРасчета"";
		
	ИначеЕсли ИмяТипаОбъекта = ИмяТипаКонстанты() Тогда
		Возврат ""Константа"";
		
	ИначеЕсли ИмяТипаОбъекта = ИмяТипаЖурналыДокументов() Тогда
		Возврат ""ЖурналДокументов"";
		
	ИначеЕсли ИмяТипаОбъекта = ИмяТипаПоследовательности() Тогда
		Возврат ""Последовательность"";
		
	ИначеЕсли ИмяТипаОбъекта = ИмяТипаРегламентныеЗадания() Тогда
		Возврат ""РегламентноеЗадание"";
		
	ИначеЕсли ИмяТипаОбъекта = ИмяТипаПерерасчеты() Тогда
		Возврат ""Перерасчет"";
		
	ИначеЕсли ИмяТипаОбъекта = ""Обработки"" Тогда
		Возврат ""Обработка"";
		
	ИначеЕсли ИмяТипаОбъекта = ""Отчеты"" Тогда
		Возврат ""Отчет"";
		
	Иначе
		
		Возврат """";
		
	КонецЕсли;
	
КонецФункции

#область ИменаТипов

// Возвращает значение для идентификации общего типа ""Регистры сведений"".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаРегистрыСведений() Экспорт
	
	Возврат ""РегистрыСведений"";
	
КонецФункции

// Возвращает значение для идентификации общего типа ""Регистры накопления"".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаРегистрыНакопления() Экспорт
	
	Возврат ""РегистрыНакопления"";
	
КонецФункции

// Возвращает значение для идентификации общего типа ""Регистры бухгалтерии"".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаРегистрыБухгалтерии() Экспорт
	
	Возврат ""РегистрыБухгалтерии"";
	
КонецФункции

// Возвращает значение для идентификации общего типа ""Регистры расчета"".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаРегистрыРасчета() Экспорт
	
	Возврат ""РегистрыРасчета"";
	
КонецФункции

// Возвращает значение для идентификации общего типа ""Документы"".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаДокументы() Экспорт
	
	Возврат ""Документы"";
	
КонецФункции

// Возвращает значение для идентификации общего типа ""Справочники"".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаСправочники() Экспорт
	
	Возврат ""Справочники"";
	
КонецФункции

// Возвращает значение для идентификации общего типа ""Перечисления"".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаПеречисления() Экспорт
	
	Возврат ""Перечисления"";
	
КонецФункции

// Возвращает значение для идентификации общего типа ""Отчеты"".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаОтчеты() Экспорт
	
	Возврат ""Отчеты"";
	
КонецФункции

// Возвращает значение для идентификации общего типа ""Обработки"".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаОбработки() Экспорт
	
	Возврат ""Обработки"";
	
КонецФункции

// Возвращает значение для идентификации общего типа ""ПланыОбмена"".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаПланыОбмена() Экспорт
	
	Возврат ""ПланыОбмена"";
	
КонецФункции

// Возвращает значение для идентификации общего типа ""Планы видов характеристик"".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаПланыВидовХарактеристик() Экспорт
	
	Возврат ""ПланыВидовХарактеристик"";
	
КонецФункции

// Возвращает значение для идентификации общего типа ""Бизнес-процессы"".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаБизнесПроцессы() Экспорт
	
	Возврат ""БизнесПроцессы"";
	
КонецФункции

// Возвращает значение для идентификации общего типа ""Задачи"".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаЗадачи() Экспорт
	
	Возврат ""Задачи"";
	
КонецФункции

// Возвращает значение для идентификации общего типа ""Планы счетов"".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаПланыСчетов() Экспорт
	
	Возврат ""ПланыСчетов"";
	
КонецФункции

// Возвращает значение для идентификации общего типа ""Планы видов расчета"".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаПланыВидовРасчета() Экспорт
	
	Возврат ""ПланыВидовРасчета"";
	
КонецФункции

// Возвращает значение для идентификации общего типа ""Константы"".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаКонстанты() Экспорт
	
	Возврат ""Константы"";
	
КонецФункции

// Возвращает значение для идентификации общего типа ""Журналы документов"".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаЖурналыДокументов() Экспорт
	
	Возврат ""ЖурналыДокументов"";
	
КонецФункции

// Возвращает значение для идентификации общего типа ""Последовательности"".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаПоследовательности() Экспорт
	
	Возврат ""Последовательности"";
	
КонецФункции

// Возвращает значение для идентификации общего типа ""РегламентныеЗадания"".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаРегламентныеЗадания() Экспорт
	
	Возврат ""РегламентныеЗадания"";
	
КонецФункции

// Возвращает значение для идентификации общего типа ""Перерасчеты"".
//
// Возвращаемое значение:
//  Строка.
//
Функция ИмяТипаПерерасчеты() Экспорт
	
	Возврат ""Перерасчеты"";
	
КонецФункции

#КонецОбласти
",
{4,7,
{9,
{1},0,"ДеревоОбъектовМетаданных",
{1,1,
{"ru","Дерево объектов метаданных"}
},
{"Pattern",
{"#",e603c0f2-92fb-4d47-8f38-a44a381cf235}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,6,
{5,1,0,"Имя",
{1,1,
{"ru","Имя"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,2,0,"Представление",
{1,1,
{"ru","Представление"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,3,0,"Пометка",
{1,1,
{"ru","Пометка"}
},
{"Pattern",
{"N",1,0,1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,4,0,"Картинка",
{1,1,
{"ru","Картинка"}
},
{"Pattern",
{"#",e6f51714-91cb-4dce-94fe-90ae3e3e1ad1}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,5,0,"ПолноеИмя",
{1,1,
{"ru","Полное имя"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{5,6,0,"ЭтоОбъектМетаданных",
{1,1,
{"ru","Это объект метаданных"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},0},
{0,0},
{0,0}
},
{9,
{2},0,"ВыбранныеОбъектыМетаданных",
{1,1,
{"ru","Выбранные объекты метаданных"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{3},0,"ЭлементыПодсистемСКоманднымИнтерфейсом",
{1,1,
{"ru","Элементы подсистем с командным интерфейсом"}
},
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{4},0,"ВыборЕдинственного",
{1,1,
{"ru","Выбор единственного"}
},
{"Pattern",
{"B"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{5},0,"ИдентификаторТекущейСтрокиПриОткрытии",
{1,1,
{"ru","Идентификатор текущей строки при открытии"}
},
{"Pattern",
{"N",10,0,0}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{6},0,"НачальноеЗначениеВыбора",
{1,1,
{"ru","Начальное значение выбора"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},
{9,
{7},0,"Объект",
{1,1,
{"ru","Объект"}
},
{"Pattern",
{"S"}
},
{0,
{0,
{"B",1},0}
},
{0,
{0,
{"B",1},0}
},
{0,0},
{0,0},0,0,0,0,
{0,0},
{0,0}
},0,0,
{#base64:77u/PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4NCjxTZXR0
aW5ncyB4bWxucz0iaHR0cDovL3Y4LjFjLnJ1LzguMS9kYXRhLWNvbXBvc2l0aW9u
LXN5c3RlbS9zZXR0aW5ncyIgeG1sbnM6ZGNzY29yPSJodHRwOi8vdjguMWMucnUv
OC4xL2RhdGEtY29tcG9zaXRpb24tc3lzdGVtL2NvcmUiIHhtbG5zOnN0eWxlPSJo
dHRwOi8vdjguMWMucnUvOC4xL2RhdGEvdWkvc3R5bGUiIHhtbG5zOnN5cz0iaHR0
cDovL3Y4LjFjLnJ1LzguMS9kYXRhL3VpL2ZvbnRzL3N5c3RlbSIgeG1sbnM6djg9
Imh0dHA6Ly92OC4xYy5ydS84LjEvZGF0YS9jb3JlIiB4bWxuczp2OHVpPSJodHRw
Oi8vdjguMWMucnUvOC4xL2RhdGEvdWkiIHhtbG5zOndlYj0iaHR0cDovL3Y4LjFj
LnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93ZWIiIHhtbG5zOndpbj0iaHR0cDovL3Y4
LjFjLnJ1LzguMS9kYXRhL3VpL2NvbG9ycy93aW5kb3dzIiB4bWxuczp4cz0iaHR0
cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiIHhtbG5zOnhzaT0iaHR0cDov
L3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPg0KCTxvdXRwdXRQ
YXJhbWV0ZXJzLz4NCjwvU2V0dGluZ3M+}
},
{0,6,
{0,"ВыбранныеОбъектыМетаданных",
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},0},
{0,"УникальныйИдентификаторИсточник",
{"Pattern",
{"#",fc01b5df-97fe-449b-83d4-218a090e681e}
},1},
{0,"КоллекцииВыбираемыхОбъектовМетаданных",
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},0},
{0,"ФильтрПоОбъектамМетаданных",
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},0},
{0,"РодительскиеПодсистемы",
{"Pattern",
{"#",4772b3b4-f4a3-49c0-a1a5-8cb5961511a3}
},0},
{0,"ТолькоВыбираемыеОбъектыМетаданных",
{"Pattern",
{"B"}
},0}
},
{0,2,
{8,
{1,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"Выбрать",
{1,1,
{"ru","Выбрать"}
},
{1,1,
{"ru","Выбрать"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ВыбратьВыполнить",3,0,0,
{0,0},1,0,1,0,0},
{8,
{2,409b9a53-7f7e-4178-86c1-33176c7c7a7a},"Закрыть",
{1,1,
{"ru","Закрыть"}
},
{1,1,
{"ru","Закрыть"}
},
{0,
{0,
{"B",1},0}
},
{0,0,0},
{4,0,
{0},"",-1,-1,1,0,""},"ЗакрытьВыполнить",3,0,0,
{0,0},1,0,1,0,0}
},
{0,0},
{0,0},0,0}