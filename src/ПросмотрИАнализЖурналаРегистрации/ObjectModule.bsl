
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Получаем настройки отчета 
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ЭлементыОтбора = Настройки.Отбор.Элементы;
	ЭлементыПараметры = Настройки.ПараметрыДанных.Элементы;
	
	// Получаем индексы включенных отборов
	СобытиеИндекс      					 = Неопределено;
	УровеньИндекс      					 = Неопределено;
	СтатусТранзакцииИндекс   			 = Неопределено;
	ПоляЖурналаРегистрацииИндекс         = Неопределено;
	
	// Отбор получаемых колонок журнала регистрации
	КолонкиСтрокой                       = ""; 
	
	// Таблица включенных отборов
	ТабОтборов = СоздатьТаблицуИспользованныхОтборов(ЭлементыОтбора, СобытиеИндекс, УровеньИндекс, СтатусТранзакцииИндекс, ПоляЖурналаРегистрацииИндекс);  
		
	// Получаем элементы параметров
	НачалоПериода						 = ЭлементыПараметры.Найти("НачалоПериода");
	КонецПериода						 = ЭлементыПараметры.Найти("КонецПериода");	
	Пользователь                         = ЭлементыПараметры.Найти("Пользователь");
	ИмяПриложения						 = ЭлементыПараметры.Найти("ИмяПриложения");
	МетаданныеПараметр                   = ЭлементыПараметры.Найти("Метаданные");
	Компьютер							 = ЭлементыПараметры.Найти("Компьютер");
	ПараметрМетаданные					 = ЭлементыПараметры.Найти("Метаданные");
	Данные								 = ЭлементыПараметры.Найти("Данные");
	ПредставлениеДанных					 = ЭлементыПараметры.Найти("ПредставлениеДанных");
	Комментарий							 = ЭлементыПараметры.Найти("Комментарий");
	Транзакция							 = ЭлементыПараметры.Найти("Транзакция");
	Сеанс								 = ЭлементыПараметры.Найти("Сеанс");
	РабочийСервер						 = ЭлементыПараметры.Найти("РабочийСервер");
	ОсновнойIPПорт						 = ЭлементыПараметры.Найти("ОсновнойIPПорт");
	ВспомогательныйIPПорт				 = ЭлементыПараметры.Найти("ВспомогательныйIPПорт");
	МаксимальноеКоличествоЗаписей 		 = ЭлементыПараметры.Найти("МаксимальноеКоличествоЗаписей");
	ПоляЖурналаРегистрации               = ЭлементыПараметры.Найти("ПоляЖурналаРегистрации");

	
	// Подготваливаем таб. значений для выгрузки журнала регистрации
	ТабЖур = Новый ТаблицаЗначений;
	
	// Формируем структур с фильтрами на получение данных из журнала регистрации
	Фильтр = Новый Структура;	
	Фильтр.Вставить("ДатаНачала",                                                               НачалоПериода.Значение);
	Фильтр.Вставить("ДатаОкончания", ?(ЗначениеЗаполнено(КонецПериода.Значение), КонецПериода.Значение, ТекущаяДата()));   	
	Если УровеньИндекс <> Неопределено Тогда
		ЭлементОтбор = ЭлементыОтбора[УровеньИндекс];
		ДоступныеЗначения = ПолучитьДоступныеПоляОтбора(Настройки, Строка(ЭлементОтбор.ЛевоеЗначение));
		ДобавитьОтборВФильтрЖурналаРегистрации(Фильтр, Строка(ЭлементОтбор.ЛевоеЗначение), ЭлементОтбор.ВидСравнения, ЭлементОтбор.ПравоеЗначение, ДоступныеЗначения);
	КонецЕсли;    	
	Если СобытиеИндекс <> Неопределено Тогда
		ЭлементОтбор = ЭлементыОтбора[СобытиеИндекс];
		ДоступныеЗначения = ПолучитьДоступныеПоляОтбора(Настройки, Строка(ЭлементОтбор.ЛевоеЗначение));
		ДобавитьОтборВФильтрЖурналаРегистрации(Фильтр, Строка(ЭлементОтбор.ЛевоеЗначение), ЭлементОтбор.ВидСравнения, ЭлементОтбор.ПравоеЗначение, ДоступныеЗначения);
	КонецЕсли;               	
	Если СтатусТранзакцииИндекс <> Неопределено Тогда 
		ЭлементОтбор = ЭлементыОтбора[СтатусТранзакцииИндекс];
		ДоступныеЗначения = ПолучитьДоступныеПоляОтбора(Настройки, Строка(ЭлементОтбор.ЛевоеЗначение));
		ДобавитьОтборВФильтрЖурналаРегистрации(Фильтр, Строка(ЭлементОтбор.ЛевоеЗначение), ЭлементОтбор.ВидСравнения, ЭлементОтбор.ПравоеЗначение, ДоступныеЗначения);
	КонецЕсли;  
	Если ПоляЖурналаРегистрацииИндекс <> Неопределено Тогда
		ЭлементОтбор = ЭлементыОтбора[ПоляЖурналаРегистрацииИндекс];
		ДоступныеПоляПараметра = ПолучитьДоступныеПоляПараметра(Настройки, "ПоляЖурналаРегистрации");
	    ДобавитьОтборВПараметрЖурналаРегистрации(ПоляЖурналаРегистрации, Строка(ЭлементОтбор.ЛевоеЗначение), ЭлементОтбор.ВидСравнения, ЭлементОтбор.ПравоеЗначение, ДоступныеЗначения);
	КонецЕсли;
	Если ИмяПриложения.Использование Тогда
		МассивПриложений = Новый Массив;
		Для Каждого Стр Из ИмяПриложения.Значение Цикл
			МассивПриложений.Добавить(Стр.Значение);
		КонецЦикла;
		Фильтр.Вставить("ИмяПриложения", МассивПриложений);
	КонецЕсли;    	
	Если Пользователь.Использование Тогда
		МассивПользователей = Новый Массив;
		Для Каждого Стр Из Пользователь.Значение Цикл
			МассивПользователей.Добавить(Стр.Значение);
		КонецЦикла;
		Фильтр.Вставить("Пользователь", МассивПользователей);
	КонецЕсли;  	
	Если МетаданныеПараметр.Использование Тогда
		МассивМетаданных = Новый Массив;
		Для Каждого Стр Из МетаданныеПараметр.Значение Цикл
			МетаданныеЗначение = ПолучитьМетаданныеПоПолномуНаименованию(Стр.Значение);
			Если ТипЗнч(МетаданныеЗначение) = Тип("ОбъектМетаданных") Тогда
				МассивМетаданных.Добавить(МетаданныеЗначение);
			КонецЕсли;
		КонецЦикла;
		Фильтр.Вставить("Метаданные", МассивМетаданных);	
	КонецЕсли;
	Если Компьютер.Использование Тогда
		МассивКомпьютеров = Новый Массив;
		Для Каждого Стр Из Компьютер.Значение Цикл
			МассивКомпьютеров.Добавить(Стр.Значение);
		КонецЦикла;
		Фильтр.Вставить("Компьютер", МассивКомпьютеров);
	КонецЕсли;    	
	Если Данные.Использование Тогда
		Фильтр.Вставить("Данные", Данные.Значение);
	КонецЕсли;    	
	Если ПредставлениеДанных.Использование Тогда
		Фильтр.Вставить("ПредставлениеДанных", ПредставлениеДанных.Значение);	
	КонецЕсли;  	
	Если Комментарий.Использование Тогда
		Фильтр.Вставить("Комментарий", Комментарий.Значение);	
	КонецЕсли;   		
	Если Транзакция.Использование Тогда
		Фильтр.Вставить("Транзакция", Транзакция .Значение);
	КонецЕсли;  	
	Если Сеанс.Использование Тогда
		МассивСеансов = Новый Массив;
		Для Каждого Стр Из Сеанс.Значение Цикл
			МассивСеансов.Добавить(Стр.Значение);
		КонецЦикла;
		Фильтр.Вставить("Сеанс", МассивСеансов);
	КонецЕсли; 	
	Если РабочийСервер.Использование Тогда
		МассивРабочихСерверов = Новый Массив;
		Для Каждого Стр Из РабочийСервер.Значение Цикл
			МассивРабочихСерверов.Добавить(Стр.Значение);
		КонецЦикла;
		Фильтр.Вставить("РабочийСервер", МассивРабочихСерверов);
	КонецЕсли;   	
	Если ОсновнойIPПорт.Использование Тогда
		МассивОсновныхIPПортов = Новый Массив;
		Для Каждого Стр Из ОсновнойIPПорт.Значение Цикл
			МассивОсновныхIPПортов.Добавить(Стр.Значение);
		КонецЦикла;
		Фильтр.Вставить("ОсновнойIPПорт", МассивОсновныхIPПортов);
	КонецЕсли;    	
	Если ВспомогательныйIPПорт.Использование Тогда
		МассивВспомогательныхIPПортов = Новый Массив;
		Для Каждого Стр Из ВспомогательныйIPПорт.Значение Цикл
			МассивВспомогательныхIPПортов.Добавить(Стр.Значение);
		КонецЦикла;
		Фильтр.Вставить("ВспомогательныйIPПорт", МассивВспомогательныхIPПортов);
	КонецЕсли;
	Если ПоляЖурналаРегистрации.Использование Тогда
		МассивПолейЖурналаРегистрации = Новый Массив;
		Для Каждого Стр Из ПоляЖурналаРегистрации.Значение Цикл
			Если ЗначениеЗаполнено(Стр.Значение) И МассивПолейЖурналаРегистрации.Найти(Стр.Значение) = Неопределено Тогда
				МассивПолейЖурналаРегистрации.Добавить(Стр.Значение);
			КонецЕсли;
		КонецЦикла;  		
		ВсегоПолей = МассивПолейЖурналаРегистрации.Количество();
		Для Каждого Стр Из МассивПолейЖурналаРегистрации Цикл
			КолонкиСтрокой = КолонкиСтрокой + Стр + ?(МассивПолейЖурналаРегистрации.Найти(Стр)<>ВсегоПолей-1,",","");
		КонецЦикла;
	КонецЕсли;
	
	// Выгружаем журнал регистрации
	ВыгрузитьЖурналРегистрации(ТабЖур, Фильтр, КолонкиСтрокой, , МаксимальноеКоличествоЗаписей.Значение); 
	
	Если ПоляЖурналаРегистрации.Использование Тогда
		ДоступныеПоляПараметра = ПолучитьДоступныеПоляПараметра(Настройки, "ПоляЖурналаРегистрации");
		Для Каждого Стр Из ДоступныеПоляПараметра Цикл
			Если ТабЖур.Колонки.Найти(Стр.Значение) = Неопределено Тогда
				ТабЖур.Колонки.Добавить(Стр.Значение);	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВключитьОтключитьОтборы(ЭлементыОтбора, ТабОтборов, Ложь);
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;  
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
												  Настройки, ДанныеРасшифровки);
												  
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,
						Новый Структура("ТабЖур", ТабЖур), 
						ДанныеРасшифровки);
	
	ДокументРезультат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ВключитьОтключитьОтборы(ЭлементыОтбора, ТабОтборов, Истина);
	
КонецПроцедуры

// СКД

Функция ПолучитьИндексЭлементаОтбора(ЭлементыОтбора, Имя)
	
	Для Каждого Стр Из ЭлементыОтбора Цикл
		Если Стр.Использование Тогда
			Если Строка(Стр.ЛевоеЗначение) = Имя Тогда
				Возврат ЭлементыОтбора.Индекс(Стр);	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
		
КонецФункции

Процедура ВключитьОтключитьОтборы(ЭлементыОтбора, ТабОтборов, Флаг)
	
	// Отключаем использование отборов
	Для Каждого Стр Из ТабОтборов Цикл
		ИндексОтбора = Стр.ИндексОтбора;
		ЭлементыОтбора[ИндексОтбора].Использование = Флаг;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьДоступныеПоляОтбора(НастройкиКомпоновщика, ИмяЭлементаОтбора)
	
	ПолеОтбора = НастройкиКомпоновщика.Отбор.ДоступныеПоляОтбора.Элементы.Найти(ИмяЭлементаОтбора);
	Если ПолеОтбора = Неопределено Тогда
		Возврат Неопределено;	
	Иначе
		Возврат ПолеОтбора.ДоступныеЗначения;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДоступныеПоляПараметра(НастройкиКомпоновщика, ИмяЭлементаПараметра)
	
	ПолеОтбора = НастройкиКомпоновщика.ПараметрыДанных.ДоступныеПараметры.Элементы.Найти(ИмяЭлементаПараметра);
	Если ПолеОтбора = Неопределено Тогда
		Возврат Неопределено;	
	Иначе
		Возврат ПолеОтбора.ДоступныеЗначения;
	КонецЕсли;   
	
КонецФункции

Функция СоздатьТаблицуИспользованныхОтборов(ЭлементыОтбора, СобытиеИндекс, УровеньИндекс, СтатусТранзакцииИндекс, ПоляЖурналаРегистрацииИндекс)
	
	ТабОтборов = Новый ТаблицаЗначений;
	ТабОтборов.Колонки.Добавить("Имя");
	ТабОтборов.Колонки.Добавить("ИндексОтбора");
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		ИмяОтбора = Строка(ЭлементОтбора.ЛевоеЗначение);
		Если ЭлементОтбора.Использование Тогда
			Если ИмяОтбора = "Уровень" Тогда
				НовСтрТабОтборов = ТабОтборов.Добавить();
				НовСтрТабОтборов.Имя = ИмяОтбора;
				НовСтрТабОтборов.ИндексОтбора = ПолучитьИндексЭлементаОтбора(ЭлементыОтбора, ИмяОтбора);
				УровеньИндекс = НовСтрТабОтборов.ИндексОтбора;
			ИначеЕсли ИмяОтбора = "Событие" Тогда 
				НовСтрТабОтборов = ТабОтборов.Добавить();
				НовСтрТабОтборов.Имя = ИмяОтбора;
				НовСтрТабОтборов.ИндексОтбора = ПолучитьИндексЭлементаОтбора(ЭлементыОтбора, ИмяОтбора); 
				СобытиеИндекс = НовСтрТабОтборов.ИндексОтбора; 
			ИначеЕсли ИмяОтбора = "СтатусТранзакции" Тогда
				НовСтрТабОтборов = ТабОтборов.Добавить();
				НовСтрТабОтборов.Имя = ИмяОтбора;
				НовСтрТабОтборов.ИндексОтбора = ПолучитьИндексЭлементаОтбора(ЭлементыОтбора, ИмяОтбора);
				СтатусТранзакцииИндекс = НовСтрТабОтборов.ИндексОтбора;
			ИначеЕсли ИмяОтбора = "ПараметрыДанных.ПоляЖурналаРегистрации" Тогда
				НовСтрТабОтборов = ТабОтборов.Добавить();
				НовСтрТабОтборов.Имя = ИмяОтбора;
				НовСтрТабОтборов.ИндексОтбора = ПолучитьИндексЭлементаОтбора(ЭлементыОтбора, ИмяОтбора);
				ПоляЖурналаРегистрацииИндекс = НовСтрТабОтборов.ИндексОтбора;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ТабОтборов;
	
КонецФункции
     
// Журнал регистрации

Процедура ДобавитьОтборВФильтрЖурналаРегистрации(СтруктураОтборов, ИмяОтбора, ВидСравненияОтбора, ЗначениеОтбора, ДоступныеЗначения)
	
	МассивЭлементов = Новый Массив;
	Если ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно Тогда
		МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(ЗначениеОтбора, ИмяОтбора));
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке Тогда 		
		Для Каждого Стр Из ЗначениеОтбора Цикл
			МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Стр.Значение, ИмяОтбора));
		КонецЦикла;
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		Для Каждого Стр Из ДоступныеЗначения Цикл
			Если Стр.Значение <> ЗначениеОтбора Тогда
				МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Стр.Значение, ИмяОтбора));
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Для Каждого Стр Из ДоступныеЗначения Цикл
			Если ЗначениеОтбора.НайтиПоЗначению(Стр.Значение) = Неопределено Тогда
				МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Стр.Значение, ИмяОтбора));
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		Для Каждого Стр Из ДоступныеЗначения Цикл  			
			МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Стр.Значение, ИмяОтбора));  			
		КонецЦикла;
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Неопределено, ИмяОтбора));	
	КонецЕсли;
	СтруктураОтборов.Вставить(ИмяОтбора, МассивЭлементов);	
	
КонецПроцедуры

Процедура ДобавитьОтборВПараметрЖурналаРегистрации(ЭлементПараметр, ИмяОтбора, ВидСравненияОтбора, ЗначениеОтбора, ДоступныеЗначения)
	
	МассивЭлементов = Новый Массив;
	Если ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно Тогда
		МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(ЗначениеОтбора, ИмяОтбора));
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке Тогда 		
		Для Каждого Стр Из ЗначениеОтбора Цикл
			МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Стр.Значение, ИмяОтбора));
		КонецЦикла;
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		Для Каждого Стр Из ДоступныеЗначения Цикл
			Если Стр.Значение <> ЗначениеОтбора Тогда
				МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Стр.Значение, ИмяОтбора));
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Для Каждого Стр Из ДоступныеЗначения Цикл
			Если ЗначениеОтбора.НайтиПоЗначению(Стр.Значение) = Неопределено Тогда
				МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Стр.Значение, ИмяОтбора));
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		Для Каждого Стр Из ДоступныеЗначения Цикл  			
			МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Стр.Значение, ИмяОтбора));  			
		КонецЦикла;
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Неопределено, ИмяОтбора));	
	КонецЕсли;
	
	ЭлементПараметр.Значение.Очистить();
	Для Каждого Стр Из МассивЭлементов Цикл
		НовЗнч = ЭлементПараметр.Значение.Добавить();
		НовЗнч.Значение = Стр;
	КонецЦикла;
	ЭлементПараметр.Использование = Истина;
	
КонецПроцедуры

Функция ПолучитьЗначениеФильтра(Значение, ИмяОтбора)
	
	Если ИмяОтбора = "Уровень" Тогда
		Возврат ПолучитьУровеньЖурналаРегистрацииПоКоду(Значение);	
	ИначеЕсли ИмяОтбора = "СтатусТранзакции" Тогда
		Возврат ПолучитьСтатусТранзакцииЖурналаРегистрацииПоКоду(Значение);
	ИначеЕсли ИмяОтбора = "Метаданные" Тогда
		Возврат ПолучитьМетаданныеПоПолномуНаименованию(Значение);
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьМетаданныеПоПолномуНаименованию(ПолноеНаименованиеМетаданных)
	
	МассивИменМетаданных = РазбитьСтроку(ПолноеНаименованиеМетаданных, ".");
	Попытка
		ЭлементМетаданных = Метаданные;
		Для Каждого Имя Из МассивИменМетаданных Цикл
			ЭлементМетаданных = ЭлементМетаданных[Имя];
		КонецЦикла;			
		Возврат ЭлементМетаданных;
	Исключение
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

Функция ПолучитьУровеньЖурналаРегистрацииПоКоду(Код)
	
	Если ТипЗнч(Код) = Тип("УровеньЖурналаРегистрации") Тогда
		Возврат Код;
	ИначеЕсли ТипЗнч(Код) = Тип("Строка") Тогда
		ЧислоИзСтроки = ПреобразоватьКЧислу(Код);
		Если Код = ЧислоИзСтроки Тогда
			Возврат УровеньЖурналаРегистрации.Информация;
		ИначеЕсли Код = ЧислоИзСтроки Тогда
			Возврат УровеньЖурналаРегистрации.Ошибка;
		ИначеЕсли Код = ЧислоИзСтроки Тогда
			Возврат УровеньЖурналаРегистрации.Предупреждение;
		ИначеЕсли Код = ЧислоИзСтроки Тогда
			Возврат УровеньЖурналаРегистрации.Примечание;
		Иначе
			Возврат Неопределено;
		КонецЕсли;     		
	КонецЕсли;
		
КонецФункции

Функция ПолучитьСтатусТранзакцииЖурналаРегистрацииПоКоду(Код)
	
	Если ТипЗнч(Код) = Тип("СтатусТранзакцииЗаписиЖурналаРегистрации") Тогда
		Возврат Код;
	ИначеЕсли ТипЗнч(Код) = Тип("Строка") Тогда
		ЧислоИзСтроки = ПреобразоватьКЧислу(Код);
		Если Код = ЧислоИзСтроки Тогда
			Возврат СтатусТранзакцииЗаписиЖурналаРегистрации.Зафиксирована;
		ИначеЕсли Код = ЧислоИзСтроки Тогда
			Возврат СтатусТранзакцииЗаписиЖурналаРегистрации.НеЗавершена;	
		ИначеЕсли Код = ЧислоИзСтроки Тогда
			Возврат СтатусТранзакцииЗаписиЖурналаРегистрации.НетТранзакции;		
		ИначеЕсли Код = ЧислоИзСтроки Тогда
			Возврат СтатусТранзакцииЗаписиЖурналаРегистрации.Отменена;		
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
		
КонецФункции

// Дополнительно

Функция РазбитьСтроку(ИсходнаяСтрока,Разделитель)
	
	Рез = Новый Массив;
	
	Строки = СтрЗаменить(ИсходнаяСтрока,Разделитель,Символы.ПС);
	
	Для Ном = 1 По СтрЧислоСтрок(Строки) Цикл
		Рез.Добавить(СтрПолучитьСтроку(Строки,Ном));
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции  
  
Функция ПреобразоватьКЧислу(ЧислоСтрока)
	
	Попытка 
		Возврат Число(ЧислоСтрока);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции