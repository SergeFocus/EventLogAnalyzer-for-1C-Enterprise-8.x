
// { Библиотека стандартных подсистем

// Обязательная функция - содержит параметры работы с обработкой  
// 
Функция СведенияОВнешнейОбработке() Экспорт 
	
	РегистрационныеДанные = Новый Структура;
	
	//       * Наименование - Строка - Необязательный. Представление для администратора (наименование элемента справочника). 
	//           Если не заполнено, то берется представление объекта метаданных внешнего объекта. 
	РегистрационныеДанные.Вставить("Наименование", "Просмотр и анализ журнала регистрации");
	
	//       * БезопасныйРежим - Булево - Необязательный. Признак подключения внешней обработки в безопасном режиме. 
	//           Значение по умолчанию Истина (обработка будет выполняться безопасно). 
	//           Подробнее - см. разделы справки "ВнешниеОтчетыМенеджер.Подключить" и "ВнешниеОбработкиМенеджер.Подключить". 
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	
	//       * Версия - Строка - Версия объекта. 
	//           Задается в формате: "<Старший номер>.<Младший номер>". 
	РегистрационныеДанные.Вставить("Версия", "2.0");
	
	//       * ВерсияБСП - Строка - Необязательный. Версия библиотеки, на которую рассчитывают механизмы внешнего объекта. 
	//           Подробнее - см. СтандартныеПодсистемыСервер.ВерсияБиблиотеки(). 
	РегистрационныеДанные.Вставить("ВерсияБСП", "");
	
	//       * Вид - Строка - Вид внешнего объекта. Соответствует реквизиту "Вид" (ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок). 
	//           Для определения вида можно использовать функции "Вид*" общего модуля ДополнительныеОтчетыИОбработкиКлиентСервер, 
	//           или указать вид явно: 
	//           ** "ПечатнаяФорма" 
	//           ** "ЗаполнениеОбъекта" 
	//           ** "СозданиеСвязанныхОбъектов" 
	//           ** "Отчет" 
	//           ** "ДополнительнаяОбработка" 
	//           ** "ДополнительныйОтчет" 
	РегистрационныеДанные.Вставить("Вид", "ДополнительныйОтчет");
	
	//       * Информация - Строка - Необязательный. Краткая информация по внешнему объекту. 
	//           В этом параметре для администратора рекомендуется указать описание возможностей внешнего объекта. 
	//           Если не заполнено, то берется комментарий объекта метаданных внешнего объекта.  
	РегистрационныеДанные.Вставить("Информация", "");
	
	// Назначение 
	МассивНазначенийОбработки = ПолучитьНазначениеОбработки();
	РегистрационныеДанные.Вставить("Назначение", МассивНазначенийОбработки);
	
	// Команды 
	ТаблицаКомандОбработки = ПолучитьТаблицуКомандОбработки();
	РегистрационныеДанные.Вставить("Команды", ТаблицаКомандОбработки);
	
	// Дополнительные необязательные параметры 
	РегистрационныеДанные.Вставить("ВерсияБСП", "");
	
	// Результат функции 
	Возврат РегистрационныеДанные;
	
КонецФункции

// Служебная функция обработки Экспорт - не обязательно  
// 
Функция ПолучитьНазначениеОбработки() Экспорт 
	
	// Инициализация массива 
	МассивНазначенийОбработки = Новый Массив;
	
	// Заполняем массив 
	//МассивНазначенийОбработки.Добавить("Справочник.Организации"); 
	
	/////////////////////////////////////////////////////////////////////////////// 
	//// При добавлении объекта в массив назначений следует убедиться, что в 
	//// его формах (в основном объекта и списка) прописан код по использованию 
	//// подсистемы дополнительных обработок 
	////  
	//// Например, в форме объекта в процедуре "ПриСозданииНаСервере" прописать: 
	//// ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма); 
	//// *текст кода может меняться в зависимости от версии БСП 
	
	// Результат функции 
	Возврат МассивНазначенийОбработки;
	
КонецФункции

// Служебная функция обработки Экспорт - не обязательно  
// 
Функция ПолучитьТаблицуКомандОбработки() Экспорт 
	
	// Инициализация таблицы 
	// Состав может меняться в зависимости от версии БСП 
	тзКоманд = Новый ТаблицаЗначений;
	тзКоманд.Колонки.Добавить("Идентификатор"           , Новый ОписаниеТипов("Строка")); // Это может быть любая текстовая строка, уникальная в пределах данной обработки 
	тзКоманд.Колонки.Добавить("Представление"           , Новый ОписаниеТипов("Строка")); // Представление команды в пользовательском интерфейсе 
	тзКоманд.Колонки.Добавить("ПоказыватьОповещение"    , Новый ОписаниеТипов("Булево")); // Надо показывать оповещение или нет 
	тзКоманд.Колонки.Добавить("Модификатор"             , Новый ОписаниеТипов("Строка")); // Дополнительный модификатор команды 
	тзКоманд.Колонки.Добавить("Использование"           , Новый ОписаниеТипов("Строка")); // Вирант использования команды (см. ниже) 
	тзКоманд.Колонки.Добавить("Скрыть"                  , Новый ОписаниеТипов("Булево")); // Серверная команда, которая вызывается из формы внешней обработки. 
	
	// Колонки ВариантЗапуска и Использование можно и желательно использовать по одиночке 
	// В случае указания обеих их значения должны совпадать 
	
	// Варианты для значения колонки "Использование": 
	//  ОткрытиеФормы – просто открывает форму обработки. 
	//  ВызовКлиентскогоМетода – будет вызвана клиентская процедура из модуля формы обработки (Печать или ВыполнитьКоманду). 
	//  ВызовСерверногоМетода  - будет вызвана серверная процедура из модуля обработки (Печать или ВыполнитьКоманду). 
	//  СценарийВБезопасномРежиме – тоже будет вызвана серверная процедура из модуля обработки в безопасном режиме (исп. с определнной версии БСП). 
	
	ДобавитьКоманду(тзКоманд, "ПросмотрИАнализЖурналаРегистрации", "Просмотр и анализ журнала регистрации", Ложь, "ОткрытиеФормы", "", Ложь);
	
	// Следует обратить внимание на значение колонки "Модификатор" - в зависимости от значения 
	// меняется принцип формирования процедуры "Печать" для внешней печатной формы 
	// Принципы использования данного параметра описаны ниже в модуле 
	
	// Результат функции 
	Возврат тзКоманд;
	
КонецФункции

// Добавление команды в таблицу команд 
// 
Процедура ДобавитьКоманду(ТаблицаКоманд, Идентификатор, Представление, ПоказыватьОповещение, Использование, Модификатор, Скрыть)
	
	// Основная команда обработки 
	строкаКоманды = ТаблицаКоманд.Добавить();
	//           ** Идентификатор - Строка - Имя команды. Для печатной формы - список макетов. 
	строкаКоманды.Идентификатор = Идентификатор;
	//           ** Представление - Строка - Представление команды для конечного пользователя. 
	строкаКоманды.Представление = Представление;
	//           ** ПоказыватьОповещение - Булево - Истина = при запуске команды будет показано стандартное оповещение. 
	//               Не работает для команд "ОткрытиеФормы". 
	строкаКоманды.ПоказыватьОповещение = ПоказыватьОповещение;
	//           ** Использование - Строка - Тип команды. Соответствует реквизиту "ВариантЗапуска" (ПеречислениеСсылка.СпособыВызоваДополнительныхОбработок). 
	//               *** "ВызовКлиентскогоМетода" 
	//               *** "ВызовСерверногоМетода" 
	//               *** "ЗаполнениеФормы" 
	//               *** "ОткрытиеФормы" 
	//               *** "СценарийВБезопасномРежиме" 
	строкаКоманды.Использование = Использование;
	//           ** Модификатор - Строка - Вспомогательный модификатор команды. 
	//               *** "ПечатьMXL" для печатных форм на основе макетов MXL. 
	строкаКоманды.Модификатор = Модификатор;
	//           ** Скрыть - Булево - Истина если команду необходимо скрывать в форме элемента. 
	строкаКоманды.Скрыть = Скрыть;
	//       * Разрешения - Массив из ОбъектXDTO {http://www.1c.ru/1cFresh/ApplicationExtensions/Permissions/a.b.c.d}PermissionBase - 
	//           Необязательный. Массив разрешений, предоставленных дополнительному отчету или обработке при работе в безопасном 
	//           режиме. 
	//строкаКоманды.Разрешения ... 
	
КонецПроцедуры

// Обязательная процедура внешней обработки  
// 
// В зависимости от типа обработки может содержать разные параметры 
// Но обязательным всегда есть ИдентификаторКоманды 
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполненияКоманды = Неопределено) Экспорт
	
	
КонецПроцедуры

// } Библиотека стандартных подсистем

Процедура Инициализация()
		
	ИнициализацияДоступныхЗначенийОтборовЖурналаРегистрации();
	
	ИнициализацияНачальныхЗначенийОтбораЖурналаРегистрации();
	
КонецПроцедуры

Процедура ИнициализацияНачальныхЗначенийОтбораЖурналаРегистрации()
	
	ТекущаяДата = ТекущаяДата();
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.НачалоПериода) Тогда
		ЭтотОбъект.НачалоПериода = НачалоДня(ТекущаяДата);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.КонецПериода) Тогда
		ЭтотОбъект.КонецПериода = КонецДня(ТекущаяДата);
	КонецЕсли;
	
	Если ЭтотОбъект.КолонкиЖурналаРегистрации.Количество() = 0 Тогда
		Для Каждого Эл Из ЭтотОбъект.КэшДоступныхЗначенийОтборов.КолонкиЖурналаРегистрации Цикл
			ЭтотОбъект.КолонкиЖурналаРегистрации.Добавить(Эл.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ЭтотОбъект.КэшироватьДанные = Истина;
	
КонецПроцедуры

Процедура ИнициализацияДоступныхЗначенийОтборовЖурналаРегистрации(КомпоновщикНастроекДляЗаполнения = Неопределено) Экспорт

	КэшДоступныхЗначенийОтборов = ПолучитьДоступныеЗначенияОтборовЖурналаРегистрации();
	
	СоответствиеВажностиЖурналаРегистрации = Новый Соответствие;
	СоответствиеВажностиЖурналаРегистрации.Вставить("УровеньЖурналаРегистрации.Ошибка", "Ошибка");
	СоответствиеВажностиЖурналаРегистрации.Вставить("УровеньЖурналаРегистрации.Предупреждение", "Предупреждение");
	СоответствиеВажностиЖурналаРегистрации.Вставить("УровеньЖурналаРегистрации.Информация", "Информация");
	СоответствиеВажностиЖурналаРегистрации.Вставить("УровеньЖурналаРегистрации.Примечание", "Примечание");
	КэшДоступныхЗначенийОтборов.Вставить("Важность", СоответствиеВажностиЖурналаРегистрации);
	
	СоответствиеСтатусТранзакциииЖурналаРегистрации = Новый Соответствие;
	СоответствиеСтатусТранзакциииЖурналаРегистрации.Вставить("СтатусТранзакцииЗаписиЖурналаРегистрации.НетТранзакции", "Нет транзакции");
	СоответствиеСтатусТранзакциииЖурналаРегистрации.Вставить("СтатусТранзакцииЗаписиЖурналаРегистрации.Зафиксирована", "Зафиксирована");
	СоответствиеСтатусТранзакциииЖурналаРегистрации.Вставить("СтатусТранзакцииЗаписиЖурналаРегистрации.НеЗавершена", "Не завершена");
	СоответствиеСтатусТранзакциииЖурналаРегистрации.Вставить("СтатусТранзакцииЗаписиЖурналаРегистрации.Отменена", "Отменена");
	КэшДоступныхЗначенийОтборов.Вставить("СтатусТранзакции", СоответствиеСтатусТранзакциииЖурналаРегистрации);
	
	СписокДоступныхКолонокЖурналаРегистрации = Новый СписокЗначений;
	СписокДоступныхКолонокЖурналаРегистрации.Добавить("Уровень");
	СписокДоступныхКолонокЖурналаРегистрации.Добавить("Дата");
	СписокДоступныхКолонокЖурналаРегистрации.Добавить("Пользователь");
	СписокДоступныхКолонокЖурналаРегистрации.Добавить("Компьютер");
	СписокДоступныхКолонокЖурналаРегистрации.Добавить("ИмяПриложения");
	СписокДоступныхКолонокЖурналаРегистрации.Добавить("Событие");
	СписокДоступныхКолонокЖурналаРегистрации.Добавить("Комментарий");
	СписокДоступныхКолонокЖурналаРегистрации.Добавить("Метаданные");
	СписокДоступныхКолонокЖурналаРегистрации.Добавить("Данные");
	СписокДоступныхКолонокЖурналаРегистрации.Добавить("ПредставлениеДанных");
	СписокДоступныхКолонокЖурналаРегистрации.Добавить("ИмяПользователя");
	СписокДоступныхКолонокЖурналаРегистрации.Добавить("ПредставлениеПриложения");
	СписокДоступныхКолонокЖурналаРегистрации.Добавить("ПредставлениеСобытия");
	СписокДоступныхКолонокЖурналаРегистрации.Добавить("ПредставлениеМетаданных");
	СписокДоступныхКолонокЖурналаРегистрации.Добавить("СтатусТранзакции");
	СписокДоступныхКолонокЖурналаРегистрации.Добавить("Транзакция");
	СписокДоступныхКолонокЖурналаРегистрации.Добавить("Сеанс");
	СписокДоступныхКолонокЖурналаРегистрации.Добавить("Соединение");
	СписокДоступныхКолонокЖурналаРегистрации.Добавить("РабочийСервер");
	СписокДоступныхКолонокЖурналаРегистрации.Добавить("ОсновнойIPПорт");
	СписокДоступныхКолонокЖурналаРегистрации.Добавить("ВспомогательныйIPПорт");
	КэшДоступныхЗначенийОтборов.Вставить("КолонкиЖурналаРегистрации", СписокДоступныхКолонокЖурналаРегистрации);
	
КонецПроцедуры

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Получаем настройки отчета 
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ЭлементыОтбора = Настройки.Отбор.Элементы;
	ЭлементыПараметры = Настройки.ПараметрыДанных.Элементы;
	ЭлементыПараметры.Найти("НачалоПериода").Значение = ЭтотОбъект.НачалоПериода;
	ЭлементыПараметры.Найти("КонецПериода").Значение = ЭтотОбъект.КонецПериода;
	
	// Если не используется кэширование данных, то очищаем ранее сохраненные значения
	Если НЕ ЭтотОбъект.КэшироватьДанные Тогда
		ЭтотОбъект.КэшЖурналаРегистрации.Очистить();	
	КонецЕсли;
	
	// Отбор получаемых колонок журнала регистрации
	КолонкиСтрокой                       = ""; 
		
	МаксимальноеКоличествоЗаписей 		 = ЭтотОбъект.МаксимальноеКоличествоЗаписей;
	ПоляЖурналаРегистрации               = ЭтотОбъект.КолонкиЖурналаРегистрации;
	
	// Подготваливаем таб. значений для выгрузки журнала регистрации
	Если НЕ РежимФормированияОтчета = "ТолькоФормированиеОтчета" Тогда
		ТабЖур = Новый ТаблицаЗначений;
		
		// Формируем структур с фильтрами на получение данных из журнала регистрации
		Фильтр = Новый Структура;
		Если ЗначениеЗаполнено(ЭтотОбъект.НачалоПериода) Тогда
			Фильтр.Вставить("ДатаНачала", ЭтотОбъект.НачалоПериода);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭтотОбъект.КонецПериода) Тогда
			Фильтр.Вставить("ДатаОкончания", ЭтотОбъект.КонецПериода);
		КонецЕсли;
		Если ЭтотОбъект.Важность.Количество() > 0 Тогда
			Фильтр.Вставить("Уровень", ЭтотОбъект.Важность.ВыгрузитьЗначения());	
		КонецЕсли;
		Если ЭтотОбъект.Приложения.Количество() > 0 Тогда
			Фильтр.Вставить("ИмяПриложения", ЭтотОбъект.Приложения.ВыгрузитьЗначения());	
		КонецЕсли;
		Если ЭтотОбъект.Пользователи.Количество() > 0 Тогда
			МассивПользователейОтбор = Новый Массив;
			Для Каждого Пользователь Из ЭтотОбъект.Пользователи Цикл
				МассивПользователейОтбор.Добавить(Пользователь.Представление);
			КонецЦикла;
			Фильтр.Вставить("Пользователь", МассивПользователейОтбор);	
		КонецЕсли;
		Если ЭтотОбъект.Компьютеры.Количество() > 0 Тогда
			Фильтр.Вставить("Компьютер", ЭтотОбъект.Компьютеры.ВыгрузитьЗначения());	
		КонецЕсли;
		Если ЭтотОбъект.События.Количество() > 0 Тогда
			Фильтр.Вставить("Событие", ЭтотОбъект.События.ВыгрузитьЗначения());	
		КонецЕсли;
		Если ЭтотОбъект.Метаданные.Количество() > 0 Тогда
			Фильтр.Вставить("Метаданные", ЭтотОбъект.Метаданные.ВыгрузитьЗначения());	
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭтотОбъект.Данные) Тогда
			Фильтр.Вставить("Данные", ЭтотОбъект.Данные);	
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭтотОбъект.ПредставлениеДанных) Тогда
			Фильтр.Вставить("ПредставлениеДанных", ЭтотОбъект.ПредставлениеДанных);	
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭтотОбъект.Комментарий) Тогда
			Фильтр.Вставить("Комментарий", ЭтотОбъект.Комментарий);	
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭтотОбъект.СтатусТранзакции) Тогда
			Фильтр.Вставить("СтатусТранзакции", ЭтотОбъект.СтатусТранзакции.ВыгрузитьЗначения());	
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭтотОбъект.Транзакция) Тогда
			Фильтр.Вставить("Транзакция", ЭтотОбъект.Транзакция);
		КонецЕсли;
		Если ЭтотОбъект.Сеансы.Количество() > 0 Тогда
			Фильтр.Вставить("Сеанс", ЭтотОбъект.Сеансы.ВыгрузитьЗначения());	
		КонецЕсли;
		Если ЭтотОбъект.РабочиеСерверы.Количество() > 0 Тогда
			Фильтр.Вставить("РабочийСервер", ЭтотОбъект.РабочиеСерверы.ВыгрузитьЗначения());	
		КонецЕсли;
		Если ЭтотОбъект.ОсновныеIPПорты.Количество() > 0 Тогда
			Фильтр.Вставить("ОсновнойIPПорт", ЭтотОбъект.ОсновныеIPПорты.ВыгрузитьЗначения());	
		КонецЕсли;
		Если ЭтотОбъект.ВспомогательныеIPПорты.Количество() > 0 Тогда
			Фильтр.Вставить("ВспомогательныйIPПорт", ЭтотОбъект.ВспомогательныеIPПорты.ВыгрузитьЗначения());	
		КонецЕсли;
		
		ВыбраныВсеКолонкиЖурналаРегистрации = КолонкиЖурналаРегистрации.Количество() = 0
			ИЛИ КолонкиЖурналаРегистрации.Количество() = ЭтотОбъект.КэшДоступныхЗначенийОтборов.КолонкиЖурналаРегистрации.Количество();
		Если НЕ ВыбраныВсеКолонкиЖурналаРегистрации Тогда
			МассивПолейЖурналаРегистрации = Новый Массив;
			Для Каждого Стр Из ПоляЖурналаРегистрации Цикл
				Если ЗначениеЗаполнено(Стр.Значение) И МассивПолейЖурналаРегистрации.Найти(Стр.Значение) = Неопределено Тогда
					МассивПолейЖурналаРегистрации.Добавить(Стр.Значение);
				КонецЕсли;
			КонецЦикла;  		
			ВсегоПолей = МассивПолейЖурналаРегистрации.Количество();
			Для Каждого Стр Из МассивПолейЖурналаРегистрации Цикл
				КолонкиСтрокой = КолонкиСтрокой + Стр + ?(МассивПолейЖурналаРегистрации.Найти(Стр)<>ВсегоПолей-1,",","");
			КонецЦикла;
		КонецЕсли;
		
		// Проверяем изменились ли настройки, влияющие на получение данных из журнала регистрации.
		// Если изменений нет, то будет использован кэш ранее сформированного отчета, если он имеется
		Если ЭтотОбъект.КэшироватьДанные
			И ТипЗнч(ЭтотОбъект.КэшФильтраЖурналаРегистрации) = Тип("Структура") Тогда
			ЗначениеСтрНовыйФильтр = ЗначениеВСтрокуВнутр(Фильтр);
			ЗначениеСтрСтарыйФильтр = ЗначениеВСтрокуВнутр(ЭтотОбъект.КэшФильтраЖурналаРегистрации);
			ФильтрИзменился = ЗначениеСтрНовыйФильтр <> ЗначениеСтрСтарыйФильтр;
			// Если дата окончания в фильтре больше текущей даты, то кэш не используем, т.к.
			// с момента последнего формирования отчета в ЖР могли добавиться новые данные
			Если (Фильтр.Свойство("ДатаОкончания") И Фильтр.ДатаОкончания > ТекущаяДата())
				ИЛИ НЕ Фильтр.Свойство("ДатаОкончания") Тогда
				ФильтрИзменился = Истина;	
			КонецЕсли;
		Иначе
			ФильтрИзменился = Истина;	
		КонецЕсли;	
		ИзменилсяСоставКолонок = ЭтотОбъект.КэшСоставаКолонок <> ЗначениеВСтрокуВнутр(КолонкиСтрокой); 
		ИзменилосьМаксимальноеКоличествоЗаписей = ЗначениеВСтрокуВнутр(МаксимальноеКоличествоЗаписей) <> ЭтотОбъект.КэшМаксимальноеКоличествоЗаписей; 
		
		Если ЭтотОбъект.КэшЖурналаРегистрации.Количество() = 0
			ИЛИ ФильтрИзменился
			ИЛИ ИзменилсяСоставКолонок
			ИЛИ ИзменилосьМаксимальноеКоличествоЗаписей Тогда
			
			// Сохраняем КЭШ до приведения настроек к использованию, т.к. это решает проблему с приведением некоторых типов
			// при передаче управления на клиент. Например: УровеньЖурналаРегистрации
			ЭтотОбъект.КэшЖурналаРегистрации.Очистить();
			ЭтотОбъект.КэшФильтраЖурналаРегистрации = Фильтр;
			ЭтотОбъект.КэшСоставаКолонок = ЗначениеВСтрокуВнутр(КолонкиСтрокой);
			ЭтотОбъект.КэшМаксимальноеКоличествоЗаписей = ЗначениеВСтрокуВнутр(МаксимальноеКоличествоЗаписей);
			
			// Подготавливаем значения фильтра для непосредственной выгрузки
			ПодготовленныйФильтрЖурналаРегистрации = ПодготовитьНастройкиФильтраДляПолученияДанныхЖурналарегистрации(Фильтр);
			// Выгружаем журнал регистрации
			ВыгрузитьЖурналРегистрации(ТабЖур, ПодготовленныйФильтрЖурналаРегистрации, КолонкиСтрокой, , МаксимальноеКоличествоЗаписей); 
			
			ДоступныеПоляПараметра = ЭтотОбъект.КэшДоступныхЗначенийОтборов.КолонкиЖурналаРегистрации;
			Для Каждого Стр Из ДоступныеПоляПараметра Цикл
				Если ТабЖур.Колонки.Найти(Стр.Значение) = Неопределено Тогда
					ТабЖур.Колонки.Добавить(Стр.Значение);	
				КонецЕсли;
			КонецЦикла;
			
			Если ЭтотОбъект.КэшироватьДанные Тогда
				ЭтотОбъект.КэшЖурналаРегистрации.Загрузить(ТабЖур);	
			КонецЕсли;
			
		Иначе
			ТабЖур = ЭтотОбъект.КэшЖурналаРегистрации.Выгрузить();
		КонецЕсли;
	Иначе
		ТабЖур = ЭтотОбъект.КэшЖурналаРегистрации.Выгрузить();	
	КонецЕсли;
	
	Если ЭтотОбъект.КэшПользователейИнформационнойБазы.Количество() = 0 Тогда
		СписокПользователейИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
		Для Каждого ПользовательИБ из СписокПользователейИБ Цикл
			НовСтрПользовательИБ = КэшПользователейИнформационнойБазы.Добавить();
			НовСтрПользовательИБ.Имя = ПользовательИБ.Имя;
			НовСтрПользовательИБ.ПолноеИмя = ПользовательИБ.ПолноеИмя;
			НовСтрПользовательИБ.УникальныйИдентификатор = ПользовательИБ.УникальныйИдентификатор;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ РежимФормированияОтчета = "ТолькоЖурналРегистацииОтчет" Тогда
		ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; 
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;  
		
		СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
		Настройки, ДанныеРасшифровки);
		
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,
		Новый Структура("ТабЖур, ПользователиИБ", ТабЖур, ЭтотОбъект.КэшПользователейИнформационнойБазы.Выгрузить()), 
		ДанныеРасшифровки);
		
		ДокументРезультат.Очистить();
		
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		ПроцессорВывода.УстановитьДокумент(ДокументРезультат);	
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);
		
	КонецЕсли;
	
	ИнициализацияДоступныхЗначенийОтборовЖурналаРегистрации();
		
КонецПроцедуры

// СКД

Функция ПолучитьДоступныеПоляОтбора(НастройкиКомпоновщика, ИмяЭлементаОтбора)
	
	ПолеОтбора = НастройкиКомпоновщика.Отбор.ДоступныеПоляОтбора.Элементы.Найти(ИмяЭлементаОтбора);
	Если ПолеОтбора = Неопределено Тогда
		Возврат Неопределено;	
	Иначе
		Возврат ПолеОтбора.ДоступныеЗначения;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДоступныеПоляПараметра(НастройкиКомпоновщика, ИмяЭлементаПараметра)
	
	ПолеОтбора = НастройкиКомпоновщика.ПараметрыДанных.ДоступныеПараметры.Элементы.Найти(ИмяЭлементаПараметра);
	Если ПолеОтбора = Неопределено Тогда
		Возврат Неопределено;	
	Иначе
		Возврат ПолеОтбора.ДоступныеЗначения;
	КонецЕсли;   
	
КонецФункции

// Журнал регистрации

Процедура ДобавитьОтборВФильтрЖурналаРегистрации(СтруктураОтборов, ИмяОтбора, ВидСравненияОтбора, ЗначениеОтбора, ДоступныеЗначения)
	
	МассивЭлементов = Новый Массив;
	Если ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно Тогда
		МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(ЗначениеОтбора, ИмяОтбора));
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке Тогда 		
		Для Каждого Стр Из ЗначениеОтбора Цикл
			МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Стр.Значение, ИмяОтбора));
		КонецЦикла;
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		Для Каждого Стр Из ДоступныеЗначения Цикл
			Если Стр.Значение <> ЗначениеОтбора Тогда
				МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Стр.Значение, ИмяОтбора));
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Для Каждого Стр Из ДоступныеЗначения Цикл
			Если ЗначениеОтбора.НайтиПоЗначению(Стр.Значение) = Неопределено Тогда
				МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Стр.Значение, ИмяОтбора));
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		Для Каждого Стр Из ДоступныеЗначения Цикл  			
			МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Стр.Значение, ИмяОтбора));  			
		КонецЦикла;
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Неопределено, ИмяОтбора));	
	КонецЕсли;
	СтруктураОтборов.Вставить(ИмяОтбора, МассивЭлементов);	
	
КонецПроцедуры

Процедура ДобавитьОтборВПараметрЖурналаРегистрации(ЭлементПараметр, ИмяОтбора, ВидСравненияОтбора, ЗначениеОтбора, ДоступныеЗначения)
	
	МассивЭлементов = Новый Массив;
	Если ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно Тогда
		МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(ЗначениеОтбора, ИмяОтбора));
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке Тогда 		
		Для Каждого Стр Из ЗначениеОтбора Цикл
			МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Стр.Значение, ИмяОтбора));
		КонецЦикла;
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		Для Каждого Стр Из ДоступныеЗначения Цикл
			Если Стр.Значение <> ЗначениеОтбора Тогда
				МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Стр.Значение, ИмяОтбора));
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Для Каждого Стр Из ДоступныеЗначения Цикл
			Если ЗначениеОтбора.НайтиПоЗначению(Стр.Значение) = Неопределено Тогда
				МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Стр.Значение, ИмяОтбора));
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		Для Каждого Стр Из ДоступныеЗначения Цикл  			
			МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Стр.Значение, ИмяОтбора));  			
		КонецЦикла;
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Неопределено, ИмяОтбора));	
	КонецЕсли;
	
	ЭлементПараметр.Значение.Очистить();
	Для Каждого Стр Из МассивЭлементов Цикл
		НовЗнч = ЭлементПараметр.Значение.Добавить();
		НовЗнч.Значение = Стр;
	КонецЦикла;
	ЭлементПараметр.Использование = Истина;
	
КонецПроцедуры

Функция ПолучитьЗначениеФильтра(Значение, ИмяОтбора)
	
	Если ИмяОтбора = "Уровень" Тогда
		Возврат ПолучитьУровеньЖурналаРегистрацииПоКоду(Значение);	
	ИначеЕсли ИмяОтбора = "СтатусТранзакции" Тогда
		Возврат ПолучитьСтатусТранзакцииЖурналаРегистрацииПоКоду(Значение);
	ИначеЕсли ИмяОтбора = "Метаданные" Тогда
		Возврат Метаданные.НайтиПоПолномуИмени(Значение);
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьУровеньЖурналаРегистрацииПоКоду(Код)
	
	Если ТипЗнч(Код) = Тип("УровеньЖурналаРегистрации") Тогда
		Возврат Код;
	ИначеЕсли ТипЗнч(Код) = Тип("Строка") Тогда
		ЧислоИзСтроки = ПреобразоватьКЧислу(Код);
		Если Код = ЧислоИзСтроки Тогда
			Возврат УровеньЖурналаРегистрации.Информация;
		ИначеЕсли Код = ЧислоИзСтроки Тогда
			Возврат УровеньЖурналаРегистрации.Ошибка;
		ИначеЕсли Код = ЧислоИзСтроки Тогда
			Возврат УровеньЖурналаРегистрации.Предупреждение;
		ИначеЕсли Код = ЧислоИзСтроки Тогда
			Возврат УровеньЖурналаРегистрации.Примечание;
		Иначе
			Возврат Неопределено;
		КонецЕсли;     		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтатусТранзакцииЖурналаРегистрацииПоКоду(Код)
	
	Если ТипЗнч(Код) = Тип("СтатусТранзакцииЗаписиЖурналаРегистрации") Тогда
		Возврат Код;
	ИначеЕсли ТипЗнч(Код) = Тип("Строка") Тогда
		ЧислоИзСтроки = ПреобразоватьКЧислу(Код);
		Если Код = ЧислоИзСтроки Тогда
			Возврат СтатусТранзакцииЗаписиЖурналаРегистрации.Зафиксирована;
		ИначеЕсли Код = ЧислоИзСтроки Тогда
			Возврат СтатусТранзакцииЗаписиЖурналаРегистрации.НеЗавершена;	
		ИначеЕсли Код = ЧислоИзСтроки Тогда
			Возврат СтатусТранзакцииЗаписиЖурналаРегистрации.НетТранзакции;		
		ИначеЕсли Код = ЧислоИзСтроки Тогда
			Возврат СтатусТранзакцииЗаписиЖурналаРегистрации.Отменена;		
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДоступныеЗначенияОтборовЖурналаРегистрации() Экспорт
	
	КолонкиОтбора = "Пользователь, Компьютер, ИмяПриложения, Событие,"+
		"Метаданные, РабочийСервер, ОсновнойIPПорт, ВспомогательныйIPПорт";
	
	Возврат ПолучитьЗначенияОтбораЖурналаРегистрации(КолонкиОтбора);
	
КонецФункции

Функция ПодготовитьНастройкиФильтраДляПолученияДанныхЖурналарегистрации(Знач ИсходноеЗначение)
	
	НовоеЗначение = Новый Структура;
	Для Каждого Эл ИЗ ИсходноеЗначение Цикл
		Если ТипЗнч(Эл.Значение) = Тип("Массив") Тогда
			ПреобразованныйМассив = Новый Массив;
			Для Каждого ИсходноеЗначениеМассива Из Эл.Значение Цикл
				Если Эл.Ключ = "Уровень" Тогда			
					ПреобразованныйМассив.Добавить(ПредопределенноеЗначение(ИсходноеЗначениеМассива));
				ИначеЕсли Эл.Ключ = "СтатусТранзакции" Тогда
					ПреобразованныйМассив.Добавить(ПредопределенноеЗначение(ИсходноеЗначениеМассива));
				Иначе
					ПреобразованныйМассив.Добавить(ИсходноеЗначениеМассива);	
				КонецЕсли;
			КонецЦикла;
			НовоеЗначение.Вставить(Эл.Ключ, ПреобразованныйМассив);
		Иначе
			НовоеЗначение.Вставить(Эл.Ключ, Эл.Значение);	
		КонецЕсли;
	КонецЦикла;
	
	Возврат НовоеЗначение;
	
КонецФункции

// Дополнительно

Функция РазбитьСтроку(ИсходнаяСтрока,Разделитель)
	
	Рез = Новый Массив;
	
	Строки = СтрЗаменить(ИсходнаяСтрока,Разделитель,Символы.ПС);
	
	Для Ном = 1 По СтрЧислоСтрок(Строки) Цикл
		Рез.Добавить(СтрПолучитьСтроку(Строки,Ном));
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции  

Функция ПреобразоватьКЧислу(ЧислоСтрока)
	
	Попытка 
		Возврат Число(ЧислоСтрока);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

Инициализация();
