
// { Библиотека стандартных подсистем

// Обязательная функция - содержит параметры работы с обработкой  
// 
Функция СведенияОВнешнейОбработке() Экспорт 
      
    РегистрационныеДанные = Новый Структура;
      
    //       * Наименование - Строка - Необязательный. Представление для администратора (наименование элемента справочника). 
    //           Если не заполнено, то берется представление объекта метаданных внешнего объекта. 
    РегистрационныеДанные.Вставить("Наименование", "Просмотр и анализ журнала регистрации");
      
    //       * БезопасныйРежим - Булево - Необязательный. Признак подключения внешней обработки в безопасном режиме. 
    //           Значение по умолчанию Истина (обработка будет выполняться безопасно). 
    //           Подробнее - см. разделы справки "ВнешниеОтчетыМенеджер.Подключить" и "ВнешниеОбработкиМенеджер.Подключить". 
    РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
      
    //       * Версия - Строка - Версия объекта. 
    //           Задается в формате: "<Старший номер>.<Младший номер>". 
    РегистрационныеДанные.Вставить("Версия", "1.0");
      
    //       * ВерсияБСП - Строка - Необязательный. Версия библиотеки, на которую рассчитывают механизмы внешнего объекта. 
    //           Подробнее - см. СтандартныеПодсистемыСервер.ВерсияБиблиотеки(). 
    РегистрационныеДанные.Вставить("ВерсияБСП", "");
      
    //       * Вид - Строка - Вид внешнего объекта. Соответствует реквизиту "Вид" (ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок). 
    //           Для определения вида можно использовать функции "Вид*" общего модуля ДополнительныеОтчетыИОбработкиКлиентСервер, 
    //           или указать вид явно: 
    //           ** "ПечатнаяФорма" 
    //           ** "ЗаполнениеОбъекта" 
    //           ** "СозданиеСвязанныхОбъектов" 
    //           ** "Отчет" 
    //           ** "ДополнительнаяОбработка" 
    //           ** "ДополнительныйОтчет" 
    РегистрационныеДанные.Вставить("Вид", "ДополнительныйОтчет");
      
    //       * Информация - Строка - Необязательный. Краткая информация по внешнему объекту. 
    //           В этом параметре для администратора рекомендуется указать описание возможностей внешнего объекта. 
    //           Если не заполнено, то берется комментарий объекта метаданных внешнего объекта.  
    РегистрационныеДанные.Вставить("Информация", "");
  
    // Назначение 
    МассивНазначенийОбработки = ПолучитьНазначениеОбработки();
    РегистрационныеДанные.Вставить("Назначение", МассивНазначенийОбработки);
      
    // Команды 
    ТаблицаКомандОбработки = ПолучитьТаблицуКомандОбработки();
    РегистрационныеДанные.Вставить("Команды", ТаблицаКомандОбработки);
      
    // Дополнительные необязательные параметры 
    РегистрационныеДанные.Вставить("ВерсияБСП", "");
      
    // Результат функции 
    Возврат РегистрационныеДанные;
      
КонецФункции
  
// Служебная функция обработки Экспорт - не обязательно  
// 
Функция ПолучитьНазначениеОбработки() Экспорт 
      
    // Инициализация массива 
    МассивНазначенийОбработки = Новый Массив;
      
    // Заполняем массив 
    //МассивНазначенийОбработки.Добавить("Справочник.Организации"); 
      
    /////////////////////////////////////////////////////////////////////////////// 
    //// При добавлении объекта в массив назначений следует убедиться, что в 
    //// его формах (в основном объекта и списка) прописан код по использованию 
    //// подсистемы дополнительных обработок 
    ////  
    //// Например, в форме объекта в процедуре "ПриСозданииНаСервере" прописать: 
    //// ДополнительныеОтчетыИОбработки.ПриСозданииНаСервере(ЭтаФорма); 
    //// *текст кода может меняться в зависимости от версии БСП 
  
    // Результат функции 
    Возврат МассивНазначенийОбработки;
      
КонецФункции
  
// Служебная функция обработки Экспорт - не обязательно  
// 
Функция ПолучитьТаблицуКомандОбработки() Экспорт 
      
    // Инициализация таблицы 
    // Состав может меняться в зависимости от версии БСП 
    тзКоманд = Новый ТаблицаЗначений;
    тзКоманд.Колонки.Добавить("Идентификатор"           , Новый ОписаниеТипов("Строка")); // Это может быть любая текстовая строка, уникальная в пределах данной обработки 
    тзКоманд.Колонки.Добавить("Представление"           , Новый ОписаниеТипов("Строка")); // Представление команды в пользовательском интерфейсе 
    тзКоманд.Колонки.Добавить("ПоказыватьОповещение"    , Новый ОписаниеТипов("Булево")); // Надо показывать оповещение или нет 
    тзКоманд.Колонки.Добавить("Модификатор"             , Новый ОписаниеТипов("Строка")); // Дополнительный модификатор команды 
    тзКоманд.Колонки.Добавить("Использование"           , Новый ОписаниеТипов("Строка")); // Вирант использования команды (см. ниже) 
    тзКоманд.Колонки.Добавить("Скрыть"                  , Новый ОписаниеТипов("Булево")); // Серверная команда, которая вызывается из формы внешней обработки. 
      
    // Колонки ВариантЗапуска и Использование можно и желательно использовать по одиночке 
    // В случае указания обеих их значения должны совпадать 
      
    // Варианты для значения колонки "Использование": 
    //  ОткрытиеФормы – просто открывает форму обработки. 
    //  ВызовКлиентскогоМетода – будет вызвана клиентская процедура из модуля формы обработки (Печать или ВыполнитьКоманду). 
    //  ВызовСерверногоМетода  - будет вызвана серверная процедура из модуля обработки (Печать или ВыполнитьКоманду). 
    //  СценарийВБезопасномРежиме – тоже будет вызвана серверная процедура из модуля обработки в безопасном режиме (исп. с определнной версии БСП). 
  
    ДобавитьКоманду(тзКоманд, "ПросмотрИАнализЖурналаРегистрации", "Просмотр и анализ журнала регистрации", Ложь, "ОткрытиеФормы", "", Ложь);
      
    // Следует обратить внимание на значение колонки "Модификатор" - в зависимости от значения 
    // меняется принцип формирования процедуры "Печать" для внешней печатной формы 
    // Принципы использования данного параметра описаны ниже в модуле 
      
    // Результат функции 
    Возврат тзКоманд;
      
КонецФункции
  
// Добавление команды в таблицу команд 
// 
Процедура ДобавитьКоманду(ТаблицаКоманд, Идентификатор, Представление, ПоказыватьОповещение, Использование, Модификатор, Скрыть)
      
    // Основная команда обработки 
    строкаКоманды = ТаблицаКоманд.Добавить();
    //           ** Идентификатор - Строка - Имя команды. Для печатной формы - список макетов. 
    строкаКоманды.Идентификатор = Идентификатор;
    //           ** Представление - Строка - Представление команды для конечного пользователя. 
    строкаКоманды.Представление = Представление;
    //           ** ПоказыватьОповещение - Булево - Истина = при запуске команды будет показано стандартное оповещение. 
    //               Не работает для команд "ОткрытиеФормы". 
    строкаКоманды.ПоказыватьОповещение = ПоказыватьОповещение;
    //           ** Использование - Строка - Тип команды. Соответствует реквизиту "ВариантЗапуска" (ПеречислениеСсылка.СпособыВызоваДополнительныхОбработок). 
    //               *** "ВызовКлиентскогоМетода" 
    //               *** "ВызовСерверногоМетода" 
    //               *** "ЗаполнениеФормы" 
    //               *** "ОткрытиеФормы" 
    //               *** "СценарийВБезопасномРежиме" 
    строкаКоманды.Использование = Использование;
    //           ** Модификатор - Строка - Вспомогательный модификатор команды. 
    //               *** "ПечатьMXL" для печатных форм на основе макетов MXL. 
    строкаКоманды.Модификатор = Модификатор;
    //           ** Скрыть - Булево - Истина если команду необходимо скрывать в форме элемента. 
    строкаКоманды.Скрыть = Скрыть;
    //       * Разрешения - Массив из ОбъектXDTO {http://www.1c.ru/1cFresh/ApplicationExtensions/Permissions/a.b.c.d}PermissionBase - 
    //           Необязательный. Массив разрешений, предоставленных дополнительному отчету или обработке при работе в безопасном 
    //           режиме. 
    //строкаКоманды.Разрешения ... 
      
КонецПроцедуры

// Обязательная процедура внешней обработки  
// 
// В зависимости от типа обработки может содержать разные параметры 
// Но обязательным всегда есть ИдентификаторКоманды 
Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполненияКоманды = Неопределено) Экспорт
  
          
КонецПроцедуры

// } Библиотека стандартных подсистем

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Получаем настройки отчета 
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ЭлементыОтбора = Настройки.Отбор.Элементы;
	ЭлементыПараметры = Настройки.ПараметрыДанных.Элементы;
	
	// Получаем индексы включенных отборов
	СобытиеИндекс      					 = Неопределено;
	УровеньИндекс      					 = Неопределено;
	СтатусТранзакцииИндекс   			 = Неопределено;
	ПоляЖурналаРегистрацииИндекс         = Неопределено;
	
	// Отбор получаемых колонок журнала регистрации
	КолонкиСтрокой                       = ""; 
	
	// Таблица включенных отборов
	ТабОтборов = СоздатьТаблицуИспользованныхОтборов(ЭлементыОтбора, СобытиеИндекс, УровеньИндекс, СтатусТранзакцииИндекс, ПоляЖурналаРегистрацииИндекс);  
		
	// Получаем элементы параметров
	НачалоПериода						 = ЭлементыПараметры.Найти("НачалоПериода");
	КонецПериода						 = ЭлементыПараметры.Найти("КонецПериода");	
	Пользователь                         = ЭлементыПараметры.Найти("Пользователь");
	ИмяПриложения						 = ЭлементыПараметры.Найти("ИмяПриложения");
	МетаданныеПараметр                   = ЭлементыПараметры.Найти("Метаданные");
	Компьютер							 = ЭлементыПараметры.Найти("Компьютер");
	ПараметрМетаданные					 = ЭлементыПараметры.Найти("Метаданные");
	Данные								 = ЭлементыПараметры.Найти("Данные");
	ПредставлениеДанных					 = ЭлементыПараметры.Найти("ПредставлениеДанных");
	Комментарий							 = ЭлементыПараметры.Найти("Комментарий");
	Транзакция							 = ЭлементыПараметры.Найти("Транзакция");
	Сеанс								 = ЭлементыПараметры.Найти("Сеанс");
	РабочийСервер						 = ЭлементыПараметры.Найти("РабочийСервер");
	ОсновнойIPПорт						 = ЭлементыПараметры.Найти("ОсновнойIPПорт");
	ВспомогательныйIPПорт				 = ЭлементыПараметры.Найти("ВспомогательныйIPПорт");
	МаксимальноеКоличествоЗаписей 		 = ЭлементыПараметры.Найти("МаксимальноеКоличествоЗаписей");
	ПоляЖурналаРегистрации               = ЭлементыПараметры.Найти("ПоляЖурналаРегистрации");

	
	// Подготваливаем таб. значений для выгрузки журнала регистрации
	ТабЖур = Новый ТаблицаЗначений;
	
	// Формируем структур с фильтрами на получение данных из журнала регистрации
	Фильтр = Новый Структура;	
	Фильтр.Вставить("ДатаНачала",                                                               НачалоПериода.Значение);
	Фильтр.Вставить("ДатаОкончания", ?(ЗначениеЗаполнено(КонецПериода.Значение), КонецПериода.Значение, ТекущаяДата()));   	
	Если УровеньИндекс <> Неопределено Тогда
		ЭлементОтбор = ЭлементыОтбора[УровеньИндекс];
		ДоступныеЗначения = ПолучитьДоступныеПоляОтбора(Настройки, Строка(ЭлементОтбор.ЛевоеЗначение));
		ДобавитьОтборВФильтрЖурналаРегистрации(Фильтр, Строка(ЭлементОтбор.ЛевоеЗначение), ЭлементОтбор.ВидСравнения, ЭлементОтбор.ПравоеЗначение, ДоступныеЗначения);
	КонецЕсли;    	
	Если СобытиеИндекс <> Неопределено Тогда
		ЭлементОтбор = ЭлементыОтбора[СобытиеИндекс];
		ДоступныеЗначения = ПолучитьДоступныеПоляОтбора(Настройки, Строка(ЭлементОтбор.ЛевоеЗначение));
		ДобавитьОтборВФильтрЖурналаРегистрации(Фильтр, Строка(ЭлементОтбор.ЛевоеЗначение), ЭлементОтбор.ВидСравнения, ЭлементОтбор.ПравоеЗначение, ДоступныеЗначения);
	КонецЕсли;               	
	Если СтатусТранзакцииИндекс <> Неопределено Тогда 
		ЭлементОтбор = ЭлементыОтбора[СтатусТранзакцииИндекс];
		ДоступныеЗначения = ПолучитьДоступныеПоляОтбора(Настройки, Строка(ЭлементОтбор.ЛевоеЗначение));
		ДобавитьОтборВФильтрЖурналаРегистрации(Фильтр, Строка(ЭлементОтбор.ЛевоеЗначение), ЭлементОтбор.ВидСравнения, ЭлементОтбор.ПравоеЗначение, ДоступныеЗначения);
	КонецЕсли;  
	Если ПоляЖурналаРегистрацииИндекс <> Неопределено Тогда
		ЭлементОтбор = ЭлементыОтбора[ПоляЖурналаРегистрацииИндекс];
		ДоступныеПоляПараметра = ПолучитьДоступныеПоляПараметра(Настройки, "ПоляЖурналаРегистрации");
	    ДобавитьОтборВПараметрЖурналаРегистрации(ПоляЖурналаРегистрации, Строка(ЭлементОтбор.ЛевоеЗначение), ЭлементОтбор.ВидСравнения, ЭлементОтбор.ПравоеЗначение, ДоступныеЗначения);
	КонецЕсли;
	Если ИмяПриложения.Использование Тогда
		МассивПриложений = Новый Массив;
		Для Каждого Стр Из ИмяПриложения.Значение Цикл
			МассивПриложений.Добавить(Стр.Значение);
		КонецЦикла;
		Фильтр.Вставить("ИмяПриложения", МассивПриложений);
	КонецЕсли;    	
	Если Пользователь.Использование Тогда
		МассивПользователей = Новый Массив;
		Для Каждого Стр Из Пользователь.Значение Цикл
			МассивПользователей.Добавить(Стр.Значение);
		КонецЦикла;
		Фильтр.Вставить("Пользователь", МассивПользователей);
	КонецЕсли;  	
	Если МетаданныеПараметр.Использование Тогда
		МассивМетаданных = Новый Массив;
		Для Каждого Стр Из МетаданныеПараметр.Значение Цикл
			МетаданныеЗначение = ПолучитьМетаданныеПоПолномуНаименованию(Стр.Значение);
			Если ТипЗнч(МетаданныеЗначение) = Тип("ОбъектМетаданных") Тогда
				МассивМетаданных.Добавить(МетаданныеЗначение);
			КонецЕсли;
		КонецЦикла;
		Фильтр.Вставить("Метаданные", МассивМетаданных);	
	КонецЕсли;
	Если Компьютер.Использование Тогда
		МассивКомпьютеров = Новый Массив;
		Для Каждого Стр Из Компьютер.Значение Цикл
			МассивКомпьютеров.Добавить(Стр.Значение);
		КонецЦикла;
		Фильтр.Вставить("Компьютер", МассивКомпьютеров);
	КонецЕсли;    	
	Если Данные.Использование Тогда
		Фильтр.Вставить("Данные", Данные.Значение);
	КонецЕсли;    	
	Если ПредставлениеДанных.Использование Тогда
		Фильтр.Вставить("ПредставлениеДанных", ПредставлениеДанных.Значение);	
	КонецЕсли;  	
	Если Комментарий.Использование Тогда
		Фильтр.Вставить("Комментарий", Комментарий.Значение);	
	КонецЕсли;   		
	Если Транзакция.Использование Тогда
		Фильтр.Вставить("Транзакция", Транзакция .Значение);
	КонецЕсли;  	
	Если Сеанс.Использование Тогда
		МассивСеансов = Новый Массив;
		Для Каждого Стр Из Сеанс.Значение Цикл
			МассивСеансов.Добавить(Стр.Значение);
		КонецЦикла;
		Фильтр.Вставить("Сеанс", МассивСеансов);
	КонецЕсли; 	
	Если РабочийСервер.Использование Тогда
		МассивРабочихСерверов = Новый Массив;
		Для Каждого Стр Из РабочийСервер.Значение Цикл
			МассивРабочихСерверов.Добавить(Стр.Значение);
		КонецЦикла;
		Фильтр.Вставить("РабочийСервер", МассивРабочихСерверов);
	КонецЕсли;   	
	Если ОсновнойIPПорт.Использование Тогда
		МассивОсновныхIPПортов = Новый Массив;
		Для Каждого Стр Из ОсновнойIPПорт.Значение Цикл
			МассивОсновныхIPПортов.Добавить(Стр.Значение);
		КонецЦикла;
		Фильтр.Вставить("ОсновнойIPПорт", МассивОсновныхIPПортов);
	КонецЕсли;    	
	Если ВспомогательныйIPПорт.Использование Тогда
		МассивВспомогательныхIPПортов = Новый Массив;
		Для Каждого Стр Из ВспомогательныйIPПорт.Значение Цикл
			МассивВспомогательныхIPПортов.Добавить(Стр.Значение);
		КонецЦикла;
		Фильтр.Вставить("ВспомогательныйIPПорт", МассивВспомогательныхIPПортов);
	КонецЕсли;
	Если ПоляЖурналаРегистрации.Использование Тогда
		МассивПолейЖурналаРегистрации = Новый Массив;
		Для Каждого Стр Из ПоляЖурналаРегистрации.Значение Цикл
			Если ЗначениеЗаполнено(Стр.Значение) И МассивПолейЖурналаРегистрации.Найти(Стр.Значение) = Неопределено Тогда
				МассивПолейЖурналаРегистрации.Добавить(Стр.Значение);
			КонецЕсли;
		КонецЦикла;  		
		ВсегоПолей = МассивПолейЖурналаРегистрации.Количество();
		Для Каждого Стр Из МассивПолейЖурналаРегистрации Цикл
			КолонкиСтрокой = КолонкиСтрокой + Стр + ?(МассивПолейЖурналаРегистрации.Найти(Стр)<>ВсегоПолей-1,",","");
		КонецЦикла;
	КонецЕсли;
	
	// Выгружаем журнал регистрации
	ВыгрузитьЖурналРегистрации(ТабЖур, Фильтр, КолонкиСтрокой, , МаксимальноеКоличествоЗаписей.Значение); 
	
	Если ПоляЖурналаРегистрации.Использование Тогда
		ДоступныеПоляПараметра = ПолучитьДоступныеПоляПараметра(Настройки, "ПоляЖурналаРегистрации");
		Для Каждого Стр Из ДоступныеПоляПараметра Цикл
			Если ТабЖур.Колонки.Найти(Стр.Значение) = Неопределено Тогда
				ТабЖур.Колонки.Добавить(Стр.Значение);	
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВключитьОтключитьОтборы(ЭлементыОтбора, ТабОтборов, Ложь);
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных; 
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;  
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
												  Настройки, ДанныеРасшифровки);
												  
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,
						Новый Структура("ТабЖур", ТабЖур), 
						ДанныеРасшифровки);
	
	ДокументРезультат.Очистить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ВключитьОтключитьОтборы(ЭлементыОтбора, ТабОтборов, Истина);
	
КонецПроцедуры

// СКД

Функция ПолучитьИндексЭлементаОтбора(ЭлементыОтбора, Имя)
	
	Для Каждого Стр Из ЭлементыОтбора Цикл
		Если Стр.Использование Тогда
			Если Строка(Стр.ЛевоеЗначение) = Имя Тогда
				Возврат ЭлементыОтбора.Индекс(Стр);	
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
		
КонецФункции

Процедура ВключитьОтключитьОтборы(ЭлементыОтбора, ТабОтборов, Флаг)
	
	// Отключаем использование отборов
	Для Каждого Стр Из ТабОтборов Цикл
		ИндексОтбора = Стр.ИндексОтбора;
		ЭлементыОтбора[ИндексОтбора].Использование = Флаг;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьДоступныеПоляОтбора(НастройкиКомпоновщика, ИмяЭлементаОтбора)
	
	ПолеОтбора = НастройкиКомпоновщика.Отбор.ДоступныеПоляОтбора.Элементы.Найти(ИмяЭлементаОтбора);
	Если ПолеОтбора = Неопределено Тогда
		Возврат Неопределено;	
	Иначе
		Возврат ПолеОтбора.ДоступныеЗначения;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДоступныеПоляПараметра(НастройкиКомпоновщика, ИмяЭлементаПараметра)
	
	ПолеОтбора = НастройкиКомпоновщика.ПараметрыДанных.ДоступныеПараметры.Элементы.Найти(ИмяЭлементаПараметра);
	Если ПолеОтбора = Неопределено Тогда
		Возврат Неопределено;	
	Иначе
		Возврат ПолеОтбора.ДоступныеЗначения;
	КонецЕсли;   
	
КонецФункции

Функция СоздатьТаблицуИспользованныхОтборов(ЭлементыОтбора, СобытиеИндекс, УровеньИндекс, СтатусТранзакцииИндекс, ПоляЖурналаРегистрацииИндекс)
	
	ТабОтборов = Новый ТаблицаЗначений;
	ТабОтборов.Колонки.Добавить("Имя");
	ТабОтборов.Колонки.Добавить("ИндексОтбора");
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		ИмяОтбора = Строка(ЭлементОтбора.ЛевоеЗначение);
		Если ЭлементОтбора.Использование Тогда
			Если ИмяОтбора = "Уровень" Тогда
				НовСтрТабОтборов = ТабОтборов.Добавить();
				НовСтрТабОтборов.Имя = ИмяОтбора;
				НовСтрТабОтборов.ИндексОтбора = ПолучитьИндексЭлементаОтбора(ЭлементыОтбора, ИмяОтбора);
				УровеньИндекс = НовСтрТабОтборов.ИндексОтбора;
			ИначеЕсли ИмяОтбора = "Событие" Тогда 
				НовСтрТабОтборов = ТабОтборов.Добавить();
				НовСтрТабОтборов.Имя = ИмяОтбора;
				НовСтрТабОтборов.ИндексОтбора = ПолучитьИндексЭлементаОтбора(ЭлементыОтбора, ИмяОтбора); 
				СобытиеИндекс = НовСтрТабОтборов.ИндексОтбора; 
			ИначеЕсли ИмяОтбора = "СтатусТранзакции" Тогда
				НовСтрТабОтборов = ТабОтборов.Добавить();
				НовСтрТабОтборов.Имя = ИмяОтбора;
				НовСтрТабОтборов.ИндексОтбора = ПолучитьИндексЭлементаОтбора(ЭлементыОтбора, ИмяОтбора);
				СтатусТранзакцииИндекс = НовСтрТабОтборов.ИндексОтбора;
			ИначеЕсли ИмяОтбора = "ПараметрыДанных.ПоляЖурналаРегистрации" Тогда
				НовСтрТабОтборов = ТабОтборов.Добавить();
				НовСтрТабОтборов.Имя = ИмяОтбора;
				НовСтрТабОтборов.ИндексОтбора = ПолучитьИндексЭлементаОтбора(ЭлементыОтбора, ИмяОтбора);
				ПоляЖурналаРегистрацииИндекс = НовСтрТабОтборов.ИндексОтбора;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат ТабОтборов;
	
КонецФункции
     
// Журнал регистрации

Процедура ДобавитьОтборВФильтрЖурналаРегистрации(СтруктураОтборов, ИмяОтбора, ВидСравненияОтбора, ЗначениеОтбора, ДоступныеЗначения)
	
	МассивЭлементов = Новый Массив;
	Если ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно Тогда
		МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(ЗначениеОтбора, ИмяОтбора));
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке Тогда 		
		Для Каждого Стр Из ЗначениеОтбора Цикл
			МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Стр.Значение, ИмяОтбора));
		КонецЦикла;
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		Для Каждого Стр Из ДоступныеЗначения Цикл
			Если Стр.Значение <> ЗначениеОтбора Тогда
				МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Стр.Значение, ИмяОтбора));
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Для Каждого Стр Из ДоступныеЗначения Цикл
			Если ЗначениеОтбора.НайтиПоЗначению(Стр.Значение) = Неопределено Тогда
				МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Стр.Значение, ИмяОтбора));
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		Для Каждого Стр Из ДоступныеЗначения Цикл  			
			МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Стр.Значение, ИмяОтбора));  			
		КонецЦикла;
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Неопределено, ИмяОтбора));	
	КонецЕсли;
	СтруктураОтборов.Вставить(ИмяОтбора, МассивЭлементов);	
	
КонецПроцедуры

Процедура ДобавитьОтборВПараметрЖурналаРегистрации(ЭлементПараметр, ИмяОтбора, ВидСравненияОтбора, ЗначениеОтбора, ДоступныеЗначения)
	
	МассивЭлементов = Новый Массив;
	Если ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно Тогда
		МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(ЗначениеОтбора, ИмяОтбора));
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке Тогда 		
		Для Каждого Стр Из ЗначениеОтбора Цикл
			МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Стр.Значение, ИмяОтбора));
		КонецЦикла;
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		Для Каждого Стр Из ДоступныеЗначения Цикл
			Если Стр.Значение <> ЗначениеОтбора Тогда
				МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Стр.Значение, ИмяОтбора));
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Для Каждого Стр Из ДоступныеЗначения Цикл
			Если ЗначениеОтбора.НайтиПоЗначению(Стр.Значение) = Неопределено Тогда
				МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Стр.Значение, ИмяОтбора));
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		Для Каждого Стр Из ДоступныеЗначения Цикл  			
			МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Стр.Значение, ИмяОтбора));  			
		КонецЦикла;
	ИначеЕсли ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		МассивЭлементов.Добавить(ПолучитьЗначениеФильтра(Неопределено, ИмяОтбора));	
	КонецЕсли;
	
	ЭлементПараметр.Значение.Очистить();
	Для Каждого Стр Из МассивЭлементов Цикл
		НовЗнч = ЭлементПараметр.Значение.Добавить();
		НовЗнч.Значение = Стр;
	КонецЦикла;
	ЭлементПараметр.Использование = Истина;
	
КонецПроцедуры

Функция ПолучитьЗначениеФильтра(Значение, ИмяОтбора)
	
	Если ИмяОтбора = "Уровень" Тогда
		Возврат ПолучитьУровеньЖурналаРегистрацииПоКоду(Значение);	
	ИначеЕсли ИмяОтбора = "СтатусТранзакции" Тогда
		Возврат ПолучитьСтатусТранзакцииЖурналаРегистрацииПоКоду(Значение);
	ИначеЕсли ИмяОтбора = "Метаданные" Тогда
		Возврат ПолучитьМетаданныеПоПолномуНаименованию(Значение);
	Иначе
		Возврат Значение;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьМетаданныеПоПолномуНаименованию(ПолноеНаименованиеМетаданных)
	
	МассивИменМетаданных = РазбитьСтроку(ПолноеНаименованиеМетаданных, ".");
	Попытка
		ЭлементМетаданных = Метаданные;
		Для Каждого Имя Из МассивИменМетаданных Цикл
			ЭлементМетаданных = ЭлементМетаданных[Имя];
		КонецЦикла;			
		Возврат ЭлементМетаданных;
	Исключение
		Возврат Неопределено;		
	КонецПопытки;
	
КонецФункции

Функция ПолучитьУровеньЖурналаРегистрацииПоКоду(Код)
	
	Если ТипЗнч(Код) = Тип("УровеньЖурналаРегистрации") Тогда
		Возврат Код;
	ИначеЕсли ТипЗнч(Код) = Тип("Строка") Тогда
		ЧислоИзСтроки = ПреобразоватьКЧислу(Код);
		Если Код = ЧислоИзСтроки Тогда
			Возврат УровеньЖурналаРегистрации.Информация;
		ИначеЕсли Код = ЧислоИзСтроки Тогда
			Возврат УровеньЖурналаРегистрации.Ошибка;
		ИначеЕсли Код = ЧислоИзСтроки Тогда
			Возврат УровеньЖурналаРегистрации.Предупреждение;
		ИначеЕсли Код = ЧислоИзСтроки Тогда
			Возврат УровеньЖурналаРегистрации.Примечание;
		Иначе
			Возврат Неопределено;
		КонецЕсли;     		
	КонецЕсли;
		
КонецФункции

Функция ПолучитьСтатусТранзакцииЖурналаРегистрацииПоКоду(Код)
	
	Если ТипЗнч(Код) = Тип("СтатусТранзакцииЗаписиЖурналаРегистрации") Тогда
		Возврат Код;
	ИначеЕсли ТипЗнч(Код) = Тип("Строка") Тогда
		ЧислоИзСтроки = ПреобразоватьКЧислу(Код);
		Если Код = ЧислоИзСтроки Тогда
			Возврат СтатусТранзакцииЗаписиЖурналаРегистрации.Зафиксирована;
		ИначеЕсли Код = ЧислоИзСтроки Тогда
			Возврат СтатусТранзакцииЗаписиЖурналаРегистрации.НеЗавершена;	
		ИначеЕсли Код = ЧислоИзСтроки Тогда
			Возврат СтатусТранзакцииЗаписиЖурналаРегистрации.НетТранзакции;		
		ИначеЕсли Код = ЧислоИзСтроки Тогда
			Возврат СтатусТранзакцииЗаписиЖурналаРегистрации.Отменена;		
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
		
КонецФункции

// Дополнительно

Функция РазбитьСтроку(ИсходнаяСтрока,Разделитель)
	
	Рез = Новый Массив;
	
	Строки = СтрЗаменить(ИсходнаяСтрока,Разделитель,Символы.ПС);
	
	Для Ном = 1 По СтрЧислоСтрок(Строки) Цикл
		Рез.Добавить(СтрПолучитьСтроку(Строки,Ном));
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции  
  
Функция ПреобразоватьКЧислу(ЧислоСтрока)
	
	Попытка 
		Возврат Число(ЧислоСтрока);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции